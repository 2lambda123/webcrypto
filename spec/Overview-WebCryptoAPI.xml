<?xml version='1.0'?>

<!--
Overview.xml
I reuse WebIDL.xsl 

This is written in XHTML 1.0 Strict with an inline <options> element that
helps the WebIDL.xsl stylesheet process the document (generating a table
of contents, section numbers, certain processing instructions).
-->

<?xml-stylesheet href='WebIDL.xsl' type='text/xsl'?>

<html xmlns='http://www.w3.org/1999/xhtml' xmlns:x='http://mcc.id.au/ns/local' xml:lang='en'>
  <head>
    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
    <title>Web Cryptography API</title>

    <link rel='stylesheet' href='webcrypto.css' type='text/css'/>
    <script src='section-links.js' type='application/ecmascript'/>
    <script src='dfn.js' type='application/ecmascript'/>
    <!--[if IE]>
        <style type='text/css'>
        .ignore {
        -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
        filter: alpha(opacity=50);
        }
        </style>
        <![endif]-->

    <options xmlns='http://mcc.id.au/ns/local'>
      <versions>
        <cvs href='http://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html' />
        <this href='http://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html' />
        <previous href='https://dvcs.w3.org/hg/webcrypto-api/raw-file/0fe9b34c13fb/spec/Overview.html' />
        <latest href='http://www.w3.org/TR/WebCryptoAPI/' />
      </versions>
      <editors>
        <person homepage='http://www.google.com/' email='sleevi@google.com'>
          <name>Ryan Sleevi</name>
          <affiliation>Google, Inc.</affiliation>
        </person>
        <person homepage='http://www.netflix.com/' email='watsonm@netflix.com'>
          <name>Mark Watson</name>
          <affiliation>Netflix</affiliation>
        </person>
      </editors>
      <maturity>ED</maturity>
      <participate qual="STND"></participate>  
    </options>
  </head>

  <body>
    <?top?>

    <div class='section'>
      <h2>Abstract</h2>
      <p>
        This specification describes a JavaScript API for performing basic
        cryptographic operations in web applications, such as hashing,
        signature generation and verification, and encryption and decryption.
        Additionally, it describes an API for applications to generate and/or
        manage the keying material necessary to perform these operations. 
        Uses for this API range from user or service authentication, document
        or code signing, and the confidentiality and integrity of
        communications.
      </p>
  
      <?revision-note?>
    </div>

    <div class='section'>
      <h2>Status of this Document</h2>
      <?sotd-top public-webcrypto-comments@w3.org http://lists.w3.org/Archives/Public/public-webcrypto-comments/ ?>

      <p>
        This document is produced by the <a href="http://www.w3.org/2012/webcrypto">Web Cryptography
        <acronym title="Working Group">WG</acronym></a> of the <acronym title="World Wide Web Consortium">W3C</acronym>.
      </p>

      <p class="XXX">
        Implementors should be aware that this specification is not stable.
        <strong>Implementors who are not taking part in the discussions are likely to find the
        specification changing out from under them in incompatible ways.</strong> Vendors interested
        in implementing this specification before it eventually reaches the Candidate Recommendation
        stage should join the mailing lists that follow and take part in the discussions.
      </p>
      <p>
        The Web Cryptography Working Group invites discussion and feedback on this draft document by
        web developers, companies, standardization bodies or forums interested in deployment of secure
        services with web applications. Specifically, Web Cryptography Working Group is looking for
        feedback on:
      </p>
      <ul>
        <li>developer convenience for managing keys and algorithms;</li>
        <li>comments on open issues the WG is currently dealing with, highlighted in this working draft;</li>
        <li>potential missing functionalities to deploy secure web applications.</li>
      </ul>
      <p>
        Previous discussion of this specification has taken place on three other
        mailing lists: <a href="mailto:whatwg@whatwg.org">whatwg@whatwg.org</a>
        (<a href="http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-May/031741.html">archive</a>)
        , <a href="mailto:public-websecurity@w3.org">public-websecurity@w3.org</a>
        (<a href="http://lists.w3.org/Archives/Public/public-web-security/2011Jun/0000.html">archive</a>), and 
        <a href="mailto:public-identity@w3.org">public-identity@w3.org</a> (<a href="http://www.w3.org/Search/Mail/Public/search?type-index=public-identity&amp;index-type=t&amp;keywords=DOMCrypt&amp;search=Search">archive</a>).
        Ongoing discussion will be on the <a href="mailto:public-webcrypto@w3.org">public-webcrypto@w3.org</a>
        mailing list.
      </p>
      
      <p>
        Web content and browser developers are encouraged to review this draft. Please send comments
        to <a href="mailto:public-webcrypto-comments@w3.org">public-webcrypto-comments@w3.org</a>,
        the <acronym title="World Wide Web Consortium">W3C</acronym>'s public email list for issues
        related to Web Cryptography. <a
        href="http://lists.w3.org/Archives/Public/public-webcrypto-comments/">Archives</a> of the
        public list and <a href="http://lists.w3.org/Archives/Public/public-webcrypto/">archives</a>
        of the member's-only list are available.
      </p>
      <p>
        Changes made to this document can be found in the
        <a href='https://dvcs.w3.org/hg/webcrypto-api/file/tip/spec/'>W3C public Mercurial server</a>.
      </p>

      <?sotd-bottom http://www.w3.org/2004/01/pp-impl/54174/status?>
    </div>

    <div id='toc'>
      <h2>Table of Contents</h2>
      <?toc sections appendices?>
    </div>

    <div id='sections'>
      <div id='introduction' class='section'>
        <h2>Introduction</h2>
        <p class='norm'>This section is non-normative.</p>
        <p>
          The Web Cryptography API defines a low-level interface to interacting with cryptographic
          key material that is managed or exposed by user agents. The API itself is agnostic of
          the underlying implementation of key storage, but provides a common set of interfaces
          that allow rich web applications to perform operations such as signature generation and
          verification, hashing and verification, encryption and decryption, without requiring
          access to the raw keying material.
        </p>
        <p>
          Cryptographic transformations are exposed via the
          <a href="#dfn-SubtleCrypto">SubtleCrypto</a> interface, which defines a common set
          of methods and events for dealing with initialization, processing data, and completing
          the operation to yield the final output. In addition to operations such as signature
          generation and verification, hashing and verification, and encryption and decryption,
          the API provides interfaces for key generation, key derivation, key import and export,
          and key discovery.
        </p>
      </div>

      <div id="use-cases" class="section">
        <h2>Use Cases</h2>
        <p class='norm'>This section is non-normative</p>
        <div id="multifactor-authentication" class="section">
          <h3>Multi-factor Authentication</h3>
          <p>
            A web application may wish to extend or replace existing username/password based
            authentication schemes with authentication methods based on proving that the user has
            access to some secret keying material. Rather than using transport-layer authentication,
            such as TLS client certificates, the web application may wish to provide a rich user
            experience by providing authentication within the application itself.
          </p>
          <p>
            Using the Web Cryptography API, such an application could locate suitable client keys,
            which may have been previously generated via the user agent or pre-provisioned
            out-of-band by the web application. It could then perform cryptographic operations such
            as decrypting an authentication challenge followed by signing an authentication response.
          </p>
          <p>
            Further, the authentication data could be further enhanced by binding the authentication
            to the TLS session that the client is authenticating over, by deriving a key based on
            properties of the underlying transport.
          </p>
          <p>
            If a user did not already have a key associated with their account, the web application
            could direct the user agent to either generate a new key or to re-use an existing key of
            the user's choosing. 
          </p>
        </div>

        <div id="protected-document" class="section">
          <h3>Protected Document Exchange</h3>
          <p>
            When exchanging documents that may contain sensitive or personal information, a
            web application may wish to ensure that only certain users can view the documents, even
            after they have been securely received, such as over TLS. One way that a web application
            can do so is by encrypting the documents with a secret key, and then wrapping that key
            with the public keys associated with authorized users.
          </p>
          <p>
            When a user agent navigates to such a web application, the application may send the
            encrypted form of the document. The user agent is then instructed to unwrap the encryption
            key, using the user's private key, and from there, decrypt and display the document.
          </p>
        </div>

        <div id="cloud-storage" class="section">
          <h3>Cloud Storage</h3>
          <p>
            When storing data with remote service providers, users may wish to protect the
            confidentiality of their documents and data prior to uploading them. The Web
            Cryptography API allows an application to have a user select a private or secret key,
            to either derive encryption keys from the selected key or to directly encrypt documents
            using this key, and then to upload the transformed/encrypted data to the service provider
            using existing APIs.
          </p>
          <p>
            This use case is similar to the <a href="#protected-document">Protected Document
            Exchange</a> use case because Cloud Storage can be considered as a user exchanging
            protected data with himself in the future.
          </p>
        </div>

        <div id="document-signing" class="section">
          <h3>Document Signing</h3>
          <p>
            A web application may wish to accept electronic signatures on documents, in lieu of
            requiring physical signatures. An authorized signature may use a key that was
            pre-provisioned out-of-band by the web application, or it may be using a key that the
            client generated specifically for the web application.
          </p>
          <p>
            The web application must be able to locate any appropriate keys for signatures, then
            direct the user to perform a signing operation over some data, as proof that they accept
            the document.
          </p>
        </div>

        <div id="data-integrity-protection" class="section">
          <h3>Data Integrity Protection</h3>
          <p>
            When caching data locally, an application may wish to ensure that this data cannot be
            modified in an offline attack. In such a case, the server may sign the data that it
            intends the client to cache, with a private key held by the server. The web application
            that subsequently uses this cached data may contain a public key that enables it to
            validate that the cache contents have not been modified by anyone else.
          </p>
        </div>

        <div id="secure-messaging" class="section">
          <h3>Secure Messaging</h3>
          <p>
            In addition to a number of web applications already offering chat based services, the
            rise of WebSockets and RTCWEB allows a great degree of flexibility in inter-user-agent
            messaging. While TLS/DTLS may be used to protect messages to web applications, users
            may wish to directly secure messages using schemes such as off-the-record (OTR) messaging.
          </p>
          <p>
            The Web Cryptography API enables OTR, by allowing key agreement to be performed so that
            the two parties can negotiate shared encryption keys and message authentication code (MAC)
            keys, to allow encryption and decryption of messages, and to prevent tampering of
            messages through the MACs.
          </p>
        </div>

        <div id="jose" class="section">
          <h3>Javascript Object Signing and Encryption (JOSE)</h3>
          <p>
            A web application wishes to make use of the structures and format of
            messages defined by the IETF Javascript Object Signing and Encryption
            (JOSE) Working Group. The web application wishes to manipulate public
            keys encoded in the JSON key format (JWK), messages that have been
            integrity protected using digital signatures or MACs (JWS), or that
            have been encrypted (JWE).
          </p>
        </div>

      </div>
      
      <div id='conformance' class='section'>
        <h2>Conformance</h2>
        <p>
          As well as sections marked as non-normative, all authoring guidelines, diagrams,
          examples, and notes in this specification are non-normative. Everything else in
          this specification is normative.
        </p>
        <p>
          The keywords <span class='RFC2119'>MUST</span>,
          <span class='RFC2119'>MUST NOT</span>,
          <span class='RFC2119'>REQUIRED</span>,
          <span class='RFC2119'>SHALL</span>,
          <span class='RFC2119'>SHALL NOT</span>,
          <span class='RFC2119'>RECOMMENDED</span>,
          <span class='RFC2119'>MAY</span>,
          <span class='RFC2119'>OPTIONAL</span>,
          in this specification are to be interpreted as described in 
          <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to
          Indicate Requirement Levels</a></cite> [<a href='#RFC2119'>RFC2119</a>].
        </p>
        <p>
          The following conformance classes are defined by this specification:
        </p>
        <dl>
          <dt><dfn id='dfn-conforming-implementation'>conforming user agent</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-implementation'>conforming user agent</a>
              if it satisfies all of the <span class='RFC2119'>MUST</span>-,
              <span class='RFC2119'>REQUIRED</span>- and <span class='RFC2119'>SHALL</span>-level
              criteria in this specification that apply to implementations. This specification
              uses both the terms "conforming user agent" and "user agent" to refer to this
              product class.
            </p>
            <p>
              User agents <span class='RFC2119'>MAY</span> implement algorithms in this
              specification in any way desired, so long as the end result is indistinguishable
              from the result that would be obtained from the specification's algorithms.
            </p>
          </dd>         
        </dl>
        <p>
          User agents that use ECMAScript to implement the APIs defined in this specification
          <span class='RFC2119'>MUST</span> implement them in a manner consistent with the
          ECMAScript Bindings defined in the Web IDL specification [<a href="#WebIDL">WEBIDL</a>]
          as this specification uses that specification and terminology.
        </p>
      </div>

      <div id='scope' class='section'>
        <h2>Scope</h2>
        <p class='norm'>This section is non-normative.</p>
        <div class="section" id="scope-abstraction">
          <h3>Level of abstraction</h3>
          <p>
            The specification attempts to focus on the common functionality and features between
            various platform-specific or standardized cryptographic APIs, and avoid features and
            functionality that are specific to one or two implementations. As such this API allows
            key generation, management, and exchange with a level of abstraction that avoids
            developers needing to care about the implementation of the underlying key storage. The
            API is focused specifically around Key objects, as an abstraction for the underlying raw
            cryptographic keying material. The intent behind this is to allow an API that is generic
            enough to allow conforming user agents to expose keys that are stored and managed
            directly by the user agent, that may be stored or managed using isolated storage APIs
            such as per-user key stores provided by some operating systems, or within key storage
            devices such as secure elements, while allowing rich web applications to manipulate the
            keys and without requiring the web application be aware of the nature of the underlying
            key storage.
          </p>
        </div>
        <div class="section" id="scope-algorithms">
          <h3>Cryptographic algorithms</h3>
          <p>
            Because the underlying cryptographic implementations will vary between conforming user
            agents, and may be subject to local policy, including but not limited to concerns such
            as government or industry regulation, security best practices, intellectual property
            concerns, and constrained operational environments, this specification does not dictate
            a mandatory set of algorithms that <span class="RFC2119">MUST</span> be implemented.
            Instead, it defines a common set of bindings that can be used in an
            algorithm-independent manner, a common framework for discovering if a user agent or key
            handle supports the underlying algorithm, and a set of conformance requirements for the
            behaviours of individual algorithms, if implemented.
          </p>
        </div>
        <div class="section" id="scope-operations">
          <h3>Operations</h3>
          <p>
            Although the API does not expose the notion of cryptographic providers or modules, each
            key is internally bound to a cryptographic provider or module, so web applications can
            rest assured that the right cryptographic provider or module will be used to perform
            cryptographic operations involving that key.
          </p>
        </div>
        <div class="section" id="scope-out-of-scope">
          <h3>Out of scope</h3>
          <p>
            This API, while allowing applications to generate, retrieve, and manipulate keying
            material, does not specifically address the provisioning of keys in particular types of
            key storage, such as secure elements or smart cards. This is due to such provisioning
            operations often being burdened with vendor-specific details that make defining a
            vendor-agnostic interface an unsuitably unbounded task. Additionally, this API does not
            deal with or address the discovery of cryptographic modules, as such concepts are
            dependent upon the underlying user agent and are not concepts that are portable between
            common operating systems, cryptographic libraries, and implementations.
          </p>
        </div>
      </div>

      <div id="security" class="section">
        <h2>Security considerations</h2>
        <p class='norm'>This section is non-normative.</p>
        <div id="security-implementers" class="section">
          <h2>Security considerations for implementers</h2>
          <p>
            User agents should take care before exposing keys that were not explicitly generated
            via the API in this specification or exposing keys that were generated in the
            context of other origins. Two applications with access to the same key handle may be
            able to spoof messages to each other, as both valid and hostile messages will appear
            to be valid for the given key. Because of this, user agents are recommended to obtain
            express permission from the user before re-using keys, unless there is a prearranged
            trust relationship.
          </p>
          <p>
            User agents should be aware of the security considerations of each algorithm
            implemented and exposed to applications. For a number of algorithms, their
            cryptographic strength is relative to the amount of work necessary to compute the
            result, whether this be through the generation of significantly large prime numbers or
            through the repeatedly iterating through the same algorithm to reduce its
            susceptibility to brute force. Implementations should therefore take measures to
            ensure against misuse. Such measures may include requiring express user permission to
            compute some expensive operations, rate limiting the number of times the application
            may call certain APIs/algorithms, and defining implementation-specific upper limits
            for inputs such as key sizes or iteration counts, as appropriate for the device on
            which the implementation executes.
          </p>
          <p>
            In some cases, the same underlying cryptographic key material may be re-usable for
            multiple algorithms. One such example is an RSA key, which may be used for both
            signing and encryption, or with RSA-PKCS1v1.5 and RSA-PSS. In some cases, the re-use
            of this key material may undermine the security properties of the key and allow
            applications to recover the raw material.
          </p>
          <div class="ednote">
            <ul>
              <li>
                <a href="https://www.w3.org/2012/webcrypto/track/issues/33">ISSUE-33</a>
                One proposed technical solution for user agents is to implement "key tainting", in
                which it records how a particular key has been used (eg: algorithms, parameters),
                and prevents it from being re-used in a manner that is unsafe or contrary to the
                security - such as preventing a PKCS1-v1.5 key from being used with RSA-PSS, or
                preventing an RSA-OAEP w/ MGF1-SHA1 from being used with RSA-OAEP w/ MGF1-SHA256.
                Questions exist about whether this should be encouraged or permitted, and the
                interoperability concerns it might cause.
              </li>
            </ul>
          </div>
        </div>
        <div id="security-developers" class="section">
          <h2>Security considerations for authors</h2>
          <p>
            While this API provides important functionality for the development of secure
            applications, it does not attempt to provide a mitigation for existing threats to
            the web security model, such as script injection or hostile intermediaries. As such,
            application developers must take care to ensure applications are secured against
            common and traditional attacks, such as script injection, by making use of appropriate
            existing functionality such as Content Security Policy and the use of TLS.
          </p>
          <p>
            This API includes a variety of cryptographic operations, some of which may have known
            security issues when used inappropriately. Application developers should take care to
            review the appropriate cryptographic literature before making use of certain algorithms,
            and should avoid attempting to develop new cryptographic protocols whenever possible.
          </p>
          <p>
            While the API in this specification provides a means to protect keys from future access
            by web applications, it makes no statements as to how the actual keying material will be
            stored by an implementation. As such, although a key may be inaccessible to web content,
            it should not be presumed that it is inaccessible to end-users. For example, a
            conforming user agent may choose to implement key storage by storing key material in
            plain text on device storage. Although the user agent prevents access to the raw keying
            material to web applications, any user with access to device storage may be able to
            recover the key.
          </p>
        </div>
      </div>

      <div id="privacy" class="section">
        <h2>Privacy considerations</h2>
        <p class='norm'>This section is non-normative.</p>
        <dl>
          <dt>Fingerprinting</dt>
          <dd>
            Malicious applications may be able to fingerprint users or user agents by detecting or
            enumerating the list of algorithms that are supported. This is especially true if an
            implementation exposes details about users' smart cards or secure element storage, as
            the combination of algorithms supported by such devices may be used to fingerprint
            devices more accurately than just the particular user agent.
          </dd>
          <dt>Tracking</dt>
          <dd>
            If user agents permit keys to be re-used between origins, without performing any
            secondary operations such as key derivation that includes the origin, then it may be
            possible for two origins to collude and track a unique user by recording their ability
            to access a common key.
          </dd>
          <dt>Super-cookies</dt>
          <dd>
            With the exception of ephemeral keys, its often desirable for applications to strongly
            associate users with keys. These associations may be used to enhance the security of
            authenticating to the application, such as using a key stored in a secure element as a
            second factor, or may be used by users to assert some identity, such as an e-mail
            signing identity. As such, these keys often live longer than their counterparts such as
            usernames and passwords, and it may be undesirable or prohibitive for users to revoke
            these keys.
            Because of this, keys may exist longer than the lifetime of the browsing context
            [<a href="#HTML">HTML</a>] and beyond the lifetime of items such as cookies, thus
            presenting a risk that a user may be tracked even after clearing such data. This is
            especially true for keys that were pre-provisioned for particular origins and for which
            no user interaction was provided.
          </dd>
        </dl>
      </div>

      <div id='dependencies' class='section'>
        <h3>Dependencies</h3>
        <p>This specification relies on underlying specifications.</p>
        <dl>
          <dt>DOM</dt>
          <dd>
            <p>
              A <a href="#dfn-conforming-implementation">conforming user agent</a> MUST support at
              least the subset of the functionality defined in DOM4 that this specification relies
              upon; in particular, it MUST support <code>Promises</code>.
              [<a href="#DOM4">DOM4</a>]
            </p>
          </dd>
          <dt>HTML</dt>
          <dd>
            <p>
              A <a href="#dfn-conforming-implementation">conforming user agent</a> MUST support at
              least the subset of the functionality defined in HTML that this specification relies
              upon; in particular, it MUST support <a href="#event-loops">event loops</a> and
              <a href="#event-handler-idl-attributes">event handler IDL attributes</a>.
              [<a href="#HTML">HTML</a>]
            </p>
          </dd>
          <dt>Web IDL</dt>
          <dd>
            <p>
              A <a href="#dfn-conforming-implementation">conforming user agent</a> MUST be a
              conforming implementation of the IDL fragments in this specification, as described in
              the Web IDL specification. [<a href="#WebIDL">WebIDL</a>]
            </p>
          </dd>
          <dt>Typed Arrays</dt>
          <dd>
            <p>
              A <a href="#dfn-conforming-implementation">conforming user agent</a> MUST support the
              Typed Arrays specification [<a href="#TypedArrays">TypedArrays</a>].
            </p>
          </dd>
        </dl>
      </div>
   
      <div id='terminology' class='section'>
        <h2>Terminology</h2>
        <p>
          The terms and algorithms
          <dfn id="document">document</dfn>,
          <dfn id="event-handler-idl-attributes">event handler IDL attributes</dfn>,
          <dfn id="event-handler-event-type">event handler event type</dfn>,
          <dfn id="origin">origin</dfn>,
          <dfn id="same-origin">same origin</dfn>,
          <dfn id="df-URL">URL</dfn>,
          <dfn id="event-loops">event loops</dfn>,
          <dfn id="dfn-task">task</dfn>,
          <dfn id="task-source">task source</dfn>,
          <dfn id="queue-a-task">queue a task</dfn>, and
          <dfn id="structured-clone">structured clone</dfn>,
          are defined by the HTML specification [<a href="#HTML">HTML</a>].
        </p>
        <p>
          When this specification says to <dfn id="terminate-the-algorithm">terminate the
          algorithm</dfn>, the user agent must terminate the algorithm after finishing the step it
          is on. The algorithm referred to is the set of specification-defined processing steps,
          rather than the underlying cryptographic algorithm that may be in the midst of processing.
        </p>
        <p>
          When this specification says to <dfn id="concept-parse-an-asn1-structure">parse an ASN.1
          structure</dfn>, the user agent must perform the following steps:
        </p>
        <ol>
          <li>
            <p>
              Let <var>data</var> be a sequence of bytes to be parsed.
            </p>
          </li>
          <li>
            <p>
              Let <var>structure</var> be the ASN.1 structure to be parsed.
            </p>
          </li>
          <li>
            <p>
              Let <var>exactData</var> be an optional boolean value. If it is not supplied,
              let it be initialized to <code>true</code>.
            </p>
          </li>
          <li>
            <p>
              Parse <var>data</var> according to the Distinguished Encoding Rules of
              <a href="#X690">X.690 (11/08)</a>, using <var>structure</var> as the ASN.1 structure
              to be decoded.
            </p>
          </li>
          <li>
            <p>
              If <var>exactData</var> was specified, and all of the bytes of <var>data</var> were
              not consumed during the parsing phase, terminate this algorithm with an error.
            </p>
          </li>
          <li>
            <p>
              Return the parsed ASN.1 structure.
            </p>
          </li>
        </ol>
        <p>
          When this specification says to <dfn id="concept-parse-a-spki">parse a
          subjectPublicKeyInfo</dfn>, the user agent must
          <a href="#concept-parse-an-asn1-structure">parse an ASN.1 structure</a>, with
          <var>data</var> set to the sequence of bytes to be parsed, <var>structure</var> as the
          ASN.1 structure of subjectPublicKeyInfo, as specified in <a href="#RFC5280">RFC 5280</a>,
          and <var>exactData</var> set to <code>true</code>.
        </p>
        <p>
          When this specification says to <dfn id="concept-parse-a-privateKeyInfo">parse a
          PrivateKeyInfo</dfn>, the user agent must <a href="#concept-parse-an-asn1-structure">parse
          an ASN.1 structure</a> with <var>data</var> set to the sequence of bytes to be parsed,
          <var>structure</var> as the ASN.1 structure of PrivateKeyInfo, as specified in
          <a href="#RFC5208">RFC 5208</a>, and <var>exactData</var> set to <code>true</code>.
        </p>
        <p>
          When this specification says to <dfn id="concept-parse-a-jwk">parse a JWK</dfn>, the user
          agent must run the following steps:
        </p>
        <ol>
          <li>
            <p>
              Let <var>data</var> be the sequence of bytes to be parsed.
            </p>
          </li>
          <li>
            <p>
              Let <var>json</var> be the unicode string that results from interpreting
              <var>data</var> according to UTF-8.
            </p>
          </li>
          <li>
            <p>
              Let <var>result</var> be the result of translating <var>json</var> into an internal
              object using the grammar specified in Section 15.12 of <a href="#ECMA-262">ECMA
              262</a>.
            </p>
          </li>
          <li>
            <p>
              If <var>result</var> does not describe an Object type, terminate this algorithm with
              an error.
            </p>
          </li>
          <li>
            <p>
              If the <code>"kty"</code> field of <var>result</var> is not present, or is not a
              string value, terminate this algorithm with an error.
            </p>
          </li>
          <li>
            <p>
              Return <var>result</var>.
            </p>
          </li>
        </ol>
        <p>
          When this specification says to <dfn id="concept-encode-an-asn1-structure">encode an ASN.1
          structure</dfn>, the user agent must perform the following steps:
          <ol>
            <li>
              <p>
                Let <var>structure</var> be the ASN.1 structure to be encoded.
              </p>
            </li>
            <li>
              <p>
                Let <var>data</var> be an object containing the data to be encoded into the
                <var>structure</var>.
              </p>
            </li>
            <li>
              <dl class="switch">
                <dt>If <var>structure</var> is an ASN.1 SEQUENCE:</dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If <var>data</var> is not an object, terminate this algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If <var>structure</var> includes any non-optional field for which there is
                        no property of <var>data</var> with the same name, terminate this
                        algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>result</var> be the result of encoding <var>data</var> according to
                        <var>structure</var> using the Distinguished Encoding Rules of
                        <a href="#X690">X.690 (11/08)</a>, where the value for a field of
                        <var>structure</var> with name <var>fieldName</var> is obtained by performing
                        the steps to
                        <a href="#concept-encode-an-asn1-structure">encode an ASN.1 structure</a> with
                        the property of <var>data</var> with the name <var>fieldName</var> as the data
                        to be encoded and the syntax
                        specified for <var>fieldName</var> in <var>structure</var> as the
                        ASN.1 structure to be
                        encoded.
                      </p>
                    </li>
                  </ol>
                </dd>
                <dt>If <var>structure</var> is an ASN.1 CHOICE:</dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If <var>data</var> is not an object, terminate this algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If no property of <var>data</var> has a name which matches one of the fields
                        of <var>structure</var>, terminate this alorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If more than one property of <var>data</var> has a name which matches one of
                        the fields of <var>struture</var>, terminate this alorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>result</var> be the result of encoding <var>data</var> according to
                        <var>structure</var> using the Distinguished Encoding Rules of
                        <a href="#X690">X.690 (11/08)</a>, where the value for the unique field of
                        <var>structure</var> with a name that is also the name of a property of
                        <var>data</var> is obtained by performing
                        the steps to
                        <a href="#concept-encode-an-asn1-structure">encode an ASN.1 structure</a> with
                        this property of <var>data</var> as the data
                        to be encoded and the syntax
                        specified for this field in <var>structure</var> as the ASN.1 structure to be
                        encoded.
                      </p>
                    </li>
                  </ol>
                </dd>
                <dt>If <var>structure</var> is an ASN.1 SEQUENCE OF or SET OF:</dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If <var>data</var> is not an array, terminate this algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>result</var> be the result of encoding the elements of
                        <var>data</var> according to
                        <var>structure</var> using the Distinguished Encoding Rules of
                        <a href="#X690">X.690 (11/08)</a>, where the value for each element of
                        <var>data</var> is obtained by performing
                        the steps to
                        <a href="#concept-encode-an-asn1-structure">encode an ASN.1 structure</a> with
                        the element of <var>data</var> as the data
                        to be encoded and the syntax
                        specified for set or sequence elements by <var>structure</var> as the ASN.1
                        structure to be
                        encoded.
                      </p>
                    </li>
                  </ol>
                </dd>
                <dt>If <var>structure</var> is defined as having type ANY:</dt>
                <dd>
                  Let <var>result</var> be equal to <var>data</var>.
                </dd>
                <dt>Otherwise:</dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If <var>data</var> is an object or array, terminate this algorithm with an
                        error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>result</var> be the result of encoding <var>data</var>
                        according to the Distinguished Encoding Rules of
                        <a href="#X690">X.690 (11/08)</a> using the format for type
                        <var>structure</var>.
                      </p>
                    </li>
                  </ol>
                </dd>
              </dl>
            </li>
            <li>
              <p>
                Return <var>result</var>
              </p>
            </li>
          </ol>
          <div class="ednote">
            <p>
              The above algorithm is not complete, in the sense that it cannot encode all possible
              ASN.1 structures. However, it is sufficient for the ASN.1 structures presently used
              in this document.
            </p>
          </div>
        </p>
        <p>
          When this specification says to <dfn id="concept-encode-a-subjectPublicKeyInfo">encode
          a subjectPublicKeyInfo</dfn> the user agent must run the following steps:
          <ol>
            <li>
              <p>
                Let <var>oid</var> be an Object Identifier identifying the public key algorithm.
              </p>
            </li>
            <li>
              <p>
                Let <var>parameters</var> be the algorithm parameters and <var>parametersType</var>
                be the ASN.1 type of the parameters.
              </p>
            </li>
            <li>
              <p>
                Let <var>publicKey</var> be an octet string containing the public key.
              </p>
            </li>
            <li>
              <dl class="switch">
                <dt>If <var>parameters</var> is not null:</dt>
                <dd>
                  <p>
                    Let <var>encodedParameters</var> be the result of
                    <a href="#concept-encode-an-asn1-structure">encoding an ASN.1 structure</a>
                    using <var>parametersType</var> as <var>structure</var> and <var>parameters</var>
                    as <var>data</var>.
                  </p>
                </dd>
                <dt>Otherwise:</dt>
                <dd>Let <var>encodedParameters</var> be null</dd>.
              </dl>
            </li>
            <li>
              <p>
                Let <var>algorithmIdentifier</var> be a new internal object.
              </p>
            </li>
            <li>
              <p>
                Set the <code>algorithm</code> property of <var>algorithmIdentifier</var> to be
                <var>oid</var>.
              </p>
            </li>
            <li>
              <p>
                If <var>encodedParameters</var> is not null, set the <code>parameters</code>
                property of <var>algorithmIdentifier</var> to be <var>encodedParameters</var>.
              </p>
            </li>
            <li>
              <p>
                Let <var>subjectPublicKeyInfo</var> be a new internal object.
              </p>
            </li>
            <li>
              <p>
                Set the <code>algorithm</code> property of <var>subjectPublicKeyInfo</var> to be
                <var>algorithmIdentifier</var>.
              </p>
            </li>
            <li>
              <p>
                Set the <code>subjectPublicKey</code> property of <var>subjectPublicKeyInfo</var>
                to be <var>publicKey</var>.
              </p>
            </li>
            <li>
              <p>
                Let <var>result</var> be the result of
                <a href="#concept-encode-an-asn1-structure">encoding an ASN.1 structure</a> using
                the ASN.1 structure of subjectPublicKeyInfo, as specified in
                <a href="#RFC5280">RFC 5280</a> as <var>structure</var> and
                <var>subjectPublicKeyInfo</var> as <var>data</var>.
              </p>
            </li>
            <li>
              <p>
                Return <var>result</var>.
              </p>
            </li>
          </ol>
        </p>
        <p>
          When this specification says to <dfn id="concept-encode-a-privateKeyInfo">encode a
          privateKeyInfo</dfn> the user agent must run the following steps:
          <ol>
            <li>
              <p>
                Let <var>oid</var> be an Object Identifier identifying the private key algorithm.
              </p>
            </li>
            <li>
              <p>
                Let <var>parameters</var> be the algorithm parameters and <var>parametersType</var>
                be the ASN.1 type of the parameters.
              </p>
            </li>
            <li>
              <p>
                Let <var>privateKey</var> be an octet string containing the private key.
              </p>
            </li>
            <li>
              <dl class="switch">
                <dt>If <var>parameters</var> is not null:</dt>
                <dd>
                  <p>
                    Let <var>encodedParameters</var> be the result of
                    <a href="#concept-encode-an-asn1-structure">encoding an ASN.1 structure</a>
                    using <var>parametersType</var> as <var>structure</var> and <var>parameters</var>
                    as <var>data</var>.
                  </p>
                </dd>
                <dt>Otherwise:</dt>
                <dd>Let <var>encodedParameters</var> be null</dd>.
              </dl>
            </li>
            <li>
              <p>
                Let <var>algorithmIdentifier</var> be a new internal object.
              </p>
            </li>
            <li>
              <p>
                Set the <code>algorithm</code> property of <var>algorithmIdentifier</var> to be
                <var>oid</var>.
              </p>
            </li>
            <li>
              <p>
                If <var>encodedParameters</var> is not null, set the <code>parameters</code>
                property of <var>algorithmIdentifier</var> to be <var>encodedParameters</var>.
              </p>
            </li>
            <li>
              <p>
                Let <var>privateKeyInfo</var> be a new internal object.
              </p>
            </li>
            <li>
              <p>
                Set the <code>privateKeyAlgorithm</code> property of <var>privateKeyInfo</var> to be
                <var>algorithmIdentifier</var>.
              </p>
            </li>
            <li>
              <p>
                Set the <code>privateKey</code> property of <var>privateKeyInfo</var>
                to be <var>privateKey</var>.
              </p>
            </li>
            <li>
              <p>
                Let <var>result</var> be the result of
                <a href="#concept-encode-an-asn1-structure">encoding an ASN.1 structure</a> using
                the ASN.1 structure of PrivateKeyInfo, as specified in
                <a href="#RFC5208">RFC 5208</a> as <var>structure</var> and
                <var>privateKeyInfo</var> as <var>data</var>.
              </p>
            </li>
            <li>
              <p>
                Return <var>result</var>.
              </p>
            </li>
          </ol>
        </p>
        <p>
          When this specification says to calculate the <dfn id="concept-usage-intersection">usage
          intersection</dfn> of two arrays, <var>a</var> and <var>b</var> the result shall be an
          array containing each <a href="#dfn-RecognizedKeyUsage">recognised key usage value</a>
          that appears in both <var>a</var> and <var>b</var>, in the order listed in the list of
          <a href="#dfn-RecognizedKeyUsage">recognised key usage values</a>, where a value is said
          to appear in an array if an element of the array exists that is a case-sensistive string
          match for that value.
        </p>
        <p>
          When this specification says to calculate the <dfn id="concept-normalized-usages">
          normalized value of a usages list</dfn>, <var>usages</var> the result shall be the
          <a href="#concept-usage-intersection">usage intersection</a> of <var>usages</var> and an
          array containing all <a href="#dfn-RecognizedKeyUsage">recognised key usage values</a>.
        </p>
      </div>

      <div id="RandomSource-interface" class="section">
        <h2>RandomSource interface</h2>
        <x:codeblock language="idl">
[NoInterfaceObject]
interface <dfn id="dfn-RandomSource">RandomSource</dfn> {
  ArrayBufferView <a href="#dfn-RandomSource-method-getRandomValues">getRandomValues</a>(ArrayBufferView array);
};
        </x:codeblock>
        <div id="RandomSource-description" class="section">
          <h3>Description</h3>
          <p>
            The <a href="#dfn-RandomSource">RandomSource</a> interface represents an interface to a
            cryptographically strong pseudo-random number generator seeded with truly random values.
          </p>
          <div class="note">
            Implementations should generate cryptographically random values using
            well-established cryptographic pseudo-random number generators seeded with high-quality
            entropy, such as from an operating-system entropy source (e.g., "/dev/urandom"). This
            specification provides no lower-bound on the information theoretic entropy present in
            cryptographically random values, but implementations should make a best effort to provide
            as much entropy as practicable.
          </div>
          <div class="note">
            This interface defines a synchronous method for obtaining cryptographically random
            values. While some devices and implementations may support truly random cryptographic
            number generators or provide interfaces that block when there is insufficient entropy,
            implementations are discouraged from using these sources when implementing
            getRandomValues, both for performance and to avoid depleting the system of entropy.
            Instead, these sources should be used to seed a cryptographic pseudo-random number
            generator that can then return suitable values efficiently.
          </div>
        </div>
        <div id="RandomSource-interface-methods" class="section">
          <h3>Methods and Parameters</h3>
          <div id="RandomSource-method-getRandomValues" class="section">
            <h4>The getRandomValues method</h4>
            <p>
              The <dfn id="dfn-RandomSource-method-getRandomValues"><code>getRandomValues</code></dfn>
              method generates cryptographically random values. It must act as follows:
            </p>
            <ol>
              <li>
                <p>
                  If <var>array</var> is not of an integer type (i.e., Int8Array, Uint8Array,
                  Int16Array, Uint16Array, Int32Array, or Uint32Array), throw a
                  <code>TypeMismatchError</code> and
                  <a href="#terminate-the-algorithm">terminate the algorithm</a>.
                </p>
              </li>
              <li>
                <p>
                  If the <code>byteLength</code> of <var>array</var> is greater than 65536, throw a
                  <code>QuotaExceededError</code> and
                  <a href="#terminate-the-algorithm">terminate the algorithm</a>.
                </p>
              </li>
              <li>
                <p>
                  Overwrite all elements of <var>array</var> with cryptographically random values of
                  the appropriate type.
                </p>
              </li>
              <li>
                <p>
                  Return <var>array</var>.
                </p>
              </li>
            </ol>
            <div class="note">
              <p>
                Do not generate keys using the <code>getRandomValues</code> method. Use the
                <a href="#dfn-SubtleCrypto-method-generateKey"><code>generateKey</code></a> method
                instead.
              </p>
            </div>
          </div>
        </div>
      </div>

      <div id="algorithm-dictionary" class="section">
        <h2>Algorithm dictionary</h2>
        <p>
          The Algorithm object is a dictionary object [<cite><a href="#WebIDL">WebIDL</a></cite>]
          which is used to specify an algorithm and any additional parameters required to fully
          specify the desired operation.
        </p>
        <x:codeblock language="idl">
<span class="comment">// TBD: <a href="http://www.w3.org/2012/webcrypto/track/issues/28">ISSUE-28</a></span>
typedef (<a href="#dfn-Algorithm">Algorithm</a> or DOMString) <dfn id="dfn-AlgorithmIdentifier">AlgorithmIdentifier</dfn>;

dictionary <dfn id="dfn-Algorithm">Algorithm</dfn> {
  DOMString <a href="#dfn-Algorithm-name">name</a>;
};
        </x:codeblock>
        <div id="algorithm-dictionary-members" class="section">
          <h3><a href="#dfn-Algorithm">Algorithm</a> Dictionary Members</h3>
          <dl>
            <dt id="dfn-Algorithm-name">
              <code>name</code>
            </dt>
            <dd>
              The name of the <a href="#algorithms">registered algorithm</a> to use.
            </dd>
          </dl>
        </div>
      </div>

      <div id="key-algorithm-interface" class="section">
        <h2>KeyAlgorithm interface</h2>
        <p>
          The KeyAlgorithm interface represents information about the contents of a given
          <a href="#dfn-Key">Key</a> object.
        </p>
        <x:codeblock language="idl">
[NoInterfaceObject]
interface <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  readonly attribute DOMString <a href="#dfn-key-algorithm-name">name</a>
};
        </x:codeblock>
        <div id="key-algorithm-interface-description" class="section">
          <h3>Description</h3>
          <p class="norm">This section is non-normative</p>
          <p>
            The <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> interface is a supplemental interface
            used to reflect the static, public properties of a <a href="#dfn-Key">Key</a> back to an
            application. These properties can be used for determination of strength (e.g.: an
            attribute that indicates the size of the key or the parameters of its creation) as well
            as for protocol negotiations (e.g.: a particular instance of an inner hash).
          </p>
        </div>
        <div id="key-algorithm-interface-members" class="section">
          <h3>KeyAlgorithm interface members</h3>
          <dl>
            <dt id="dfn-key-algorithm-name">name</dt>
            <dd>The name of the algorithm used to generate the <a href="#dfn-Key">Key</a></dd>
          </dl>
        </div>
      </div>
          
      <div id="key-interface" class="section">
        <h2>Key interface</h2>
        <p>
          The Key object represents an opaque reference to keying material that is managed by the
          user agent.
        </p>
        <x:codeblock language="idl">
typedef DOMString <a href="#dfn-KeyType">KeyType</a>;

typedef DOMString <a href="#dfn-KeyUsage">KeyUsage</a>;

interface <dfn id="dfn-Key">Key</dfn> {
  readonly attribute <a href="#dfn-KeyType">KeyType</a> <a href="#dfn-Key-type">type</a>;
  readonly attribute boolean <a href="#dfn-Key-extractable">extractable</a>;
  readonly attribute <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> <a href="#dfn-Key-algorithm">algorithm</a>;
  readonly attribute <a href="#dfn-KeyUsage">KeyUsage</a>[] <a href="#dfn-Key-usages">usages</a>;
};
        </x:codeblock>
        <div id="key-interface-description" class="section">
          <h3>Description</h3>
          <p class="norm">This section is non-normative</p>
          <p>
            This specification provides a uniform interface for many different kinds of keying
            material managed by the user agent. This may include keys that have been generated by
            the user agent, derived from other keys by the user agent, imported to the user agent
            through user actions or using this API, pre-provisioned within software or hardware to
            which the user agent has access or made available to the user agent in other ways. The
            term key refers broadly to any keying material including actual keys for cryptographic
            operations and secret values obtained within key derivation or exchange operations.
          </p>
          <p>
            The Key object is not required to directly interface with the underlying key storage
            mechanism, and may instead simply be a reference for the user agent to understand how to
            obtain the keying material when needed, eg. when performing a cryptographic operation.
          </p>
        </div>

        <div id="key-interface-types" class="section">
          <h3>Key interface data types</h3>
          <dl>
            <dt id="dfn-KeyType"><code>KeyType</code></dt>
            <dd>
              The type of a key. The <dfn id="dfn-RecognizedKeyType">recognized key type values</dfn>
              are <code>"public"</code>, <code>"private"</code> and <code>"secret"</code>.
              Opaque keying material, including that used for symmetric algorithms, is represented by
              <code>"secret"</code>, while keys used as part of asymmetric algorithms composed of
              public/private keypairs will be either <code>"public"</code> or <code>"private"</code>.
            </dd>
            <dt id="dfn-KeyUsage"><code>KeyUsage</code></dt>
            <dd>
              A type of operation that may be performed using a key. The
              <dfn id="dfn-RecognizedKeyUsage">recognized key usage values</dfn> are
              <code>"encrypt"</code>,
              <code>"decrypt"</code>,
              <code>"sign"</code>,
              <code>"verify"</code>,
              <code>"deriveKey"</code>,
              <code>"deriveBits"</code>,
              <code>"wrapKey"</code> and
              <code>"unwrapKey"</code>.
            </dd>
          </dl>
        </div>

        <div id="key-interface-members" class="section">
          <h3>Key interface members</h3>
          <dl>
            <dt id="dfn-Key-type"><code>type</code></dt>
            <dd>
              The type of the underlying key.
            </dd>
            <dt id="dfn-Key-extractable"><code>extractable</code></dt>
            <dd>
              Whether or not the raw keying material may be exported by the application.
            </dd>
            <dt id="dfn-Key-algorithm"><code>algorithm</code></dt>
            <dd>
              The <a href="#dfn-KeyAlgorithm"><code>KeyAlgorithm</code></a> used to generate the key.
            </dd>
            <dt id="dfn-Key-usages"><code>usages</code></dt>
            <dd>
              An <code>Array</code> of <a href="#dfn-KeyUsage"><code>KeyUsages</code></a> that
              indicate what cryptographic operations may be used with this key.
            </dd>
          </dl>
        </div>

        <div id="key-interface-clone" class="section">
          <h3>Structured clone algorithm</h3>
          <p>
            When a user agent is required to obtain a <a href="#structured-clone">structured clone</a>
            of a <a href="#dfn-Key">Key</a> object, it must run the following steps.
          </p>
          <ol>
            <li>
              Let <var>input</var> and <var>memory</var> be the corresponding inputs defined
              by the <a href="#structured-clone">internal structured cloning algorithm</a>,
              where <var>input</var> represents a <a href="#dfn-Key">Key</a> object to be cloned.
            </li>
            <li>Let <var>output</var> be a newly constructed <a href="#dfn-Key">Key</a> object.</li>
            <li>
              Let the following attributes of <var>output</var> be equal to the value obtained by
              invoking the internal structured clone algorithm recursively, using the corresponding
              attribute on <var>input</var> as the new "<var>input</var>" argument and
              <var>memory</var> as the new "<var>memory</var>" argument:
              <ul>
                <li><a href="#dfn-Key-type">type</a></li>
                <li><a href="#dfn-Key-extractable">extractable</a></li>
                <li><a href="#dfn-Key-algorithm">KeyAlgorithm</a></li>
                <li><a href="#dfn-Key-usages">KeyUsage</a></li>
              </ul>
            </li>
            <li>
              Let <var>output</var> refer to the same underlying cryptographic material and
              cryptographic material key storage of <var>input</var>.
            </li>
          </ol>
          <div class="note">
            <strong>Implementation Note:</strong> When performing the structured clone algorithm for
            a <code>Key</code> object, it is important that the underlying cryptographic key
            material not be exposed to a JavaScript implementation. Such a situation may arise if an
            implementation fails to implement the structured clone algorithm correctly, such as by
            allowing a <code>Key</code> object to be serialized as part of a structured clone
            implementation, but then deserializing it as a <code>DOMString</code>, rather than as a
            <code>Key</code> object.
          </div>
        </div>
      </div>

      <div id="crypto-interface" class="section">
        <h2>Crypto interface</h2>
        <x:codeblock language="idl">
interface <dfn id="dfn-Crypto">Crypto</dfn> {
  readonly attribute <a href="#dfn-SubtleCrypto">SubtleCrypto</a> subtle;
};

<a href="#dfn-Crypto">Crypto</a> implements <a href="#dfn-RandomSource">RandomSource</a>;

partial interface Window {
  readonly attribute <a href="#dfn-Crypto">Crypto</a> crypto;
};
        </x:codeblock>
      </div>

      <div id="subtlecrypto-interface" class="section">
        <h2>SubtleCrypto interface</h2>
        <x:codeblock language="idl">
typedef DOMString <a href="#dfn-KeyFormat"><code>KeyFormat</code></a>;

typedef (ArrayBuffer or ArrayBufferView) CryptoOperationData;

interface <dfn id="dfn-SubtleCrypto">SubtleCrypto</dfn> {
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-encrypt">encrypt</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                       <a href="#dfn-Key">Key</a> key,
                       CryptoOperationData data);
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-decrypt">decrypt</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                       <a href="#dfn-Key">Key</a> key,
                       CryptoOperationData data);
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-sign">sign</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                    <a href="#dfn-Key">Key</a> key,
                    CryptoOperationData data);
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-verify">verify</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                      <a href="#dfn-Key">Key</a> key,
                      CryptoOperationData signature,
                      CryptoOperationData data);
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-digest">digest</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                      CryptoOperationData data);

  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-generateKey">generateKey</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                          boolean extractable,
                          <a href="#dfn-KeyUsage">KeyUsage</a>[] keyUsages );
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-deriveKey">deriveKey</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                         <a href="#dfn-Key">Key</a> baseKey,
                         <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a>? derivedKeyType,
                         boolean extractable,
                         <a href="#dfn-KeyUsage">KeyUsage</a>[] keyUsages );
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-deriveBits">deriveBits</a>(<a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> algorithm,
                          <a href="#dfn-Key">Key</a> baseKey,
                          unsigned long length);
  
  <span class="comment">// TBD: <a href="https://www.w3.org/2012/webcrypto/track/issues/35">ISSUE-35</a></span>
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-importKey">importKey</a>(<a href="#dfn-KeyFormat">KeyFormat</a> format,
                         CryptoOperationData keyData,
                         <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a>? algorithm,
                         boolean extractable,
                         <a href="#dfn-KeyUsage">KeyUsage</a>[] keyUsages );
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-exportKey">exportKey</a>(<a href="#dfn-KeyFormat">KeyFormat</a> format, <a href="#dfn-Key">Key</a> key);

  <span class="comment">// Note: wrapKey and unwrapKey remain "Features at Risk"</span>
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-wrapKey">wrapKey</a>(<a href="#dfn-KeyFormat">KeyFormat</a> format,
                       <a href="#dfn-Key">Key</a> key,
                       <a href="#dfn-Key">Key</a> wrappingKey,
                       <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> wrapAlgorithm);
  Promise&lt;any&gt; <a href="#dfn-SubtleCrypto-method-unwrapKey">unwrapKey</a>(<a href="#dfn-KeyFormat">KeyFormat</a> format,
                         CryptoOperationData wrappedKey,
                         <a href="#dfn-Key">Key</a> unwrappingKey,
                         <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> unwrapAlgorithm,
                         <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a>? unwrappedKeyAlgorithm,
                         boolean extractable,
                         <a href="#dfn-KeyUsage">KeyUsage</a>[] keyUsages );
};
        </x:codeblock>
        <div class="ednote">
          <ul>
            <li>
              <a href="https://www.w3.org/2012/webcrypto/track/issues/35">ISSUE-35</a>:
              The specification for wrapKey/unwrapKey does not specify how authors that do not trust
              the execution environment may indicate required attributes for keys that are
              unwrapped. An example is unwrapping a key with a non-extractable key, marking
              the newly unwrapped key as non extractable, and then further indicating that all
              keys unwrapped with the newly unwrapped key are also non-extractable.
            </li>
          </ul>
        </div>
        <div id="subtlecrypto-interface-description" class="section">
          <h3>Description</h3>
          <p class="norm">This section is non-normative.</p>
          <p>
            The <a href="#dfn-SubtleCrypto">SubtleCrypto</a> interface provides a set of
            methods for dealing with low-level cryptographic primitives and algorithms. It is
            named <code>SubtleCrypto</code> to reflect the fact that many of these algorithms
            have subtle usage requirements in order to provide the required algorithmic
            security guarantees.
          </p>
          <p>
            For example, the direct use of an unauthenticated encryption scheme, such as
            <a href="#aes-ctr">AES in counter mode</a>, gives potential attackers the ability to
            manipulate bits in the output by manipulating bits in the input, compromising the
            integrity of the message. However, AES-CTR can be used securely in combination
            with other cryptographic primitives, such as message authentication codes, to ensure
            the integrity of the protected message, but only when the message authentication
            code is constructed over the encrypted message and IV.
          </p>
          <p>
            Developers making use of the SubtleCrypto interface are expected to be aware of the
            security concerns associated with both the design and implementation of the various
            algorithms provided. The raw algorithms are provided in order to allow developers
            maximum flexibility in implementing a variety of protocols and applications, each of
            which may represent the composition and security parameters in a unique manner that
            necessitate the use of the raw algorithms.
          </p>
        </div>

        <div id="subtlecrypto-interface-datatypes" class="section">
          <h3>Data Types</h3>
          <dl>
            <dt id="dfn-KeyFormat"><code>KeyFormat</code></dt>
            <dd>Specifies a serialization format for a key. The <dfn id="dfn-RecognizedKeyFormats">recognized key format values</dfn> are:
              <dl>
                <dt><code>raw</code></dt>
                <dd>An unformatted sequence of bytes. Intended for secret keys.</dd>
                <dt><code>pkcs8</code></dt>
                <dd>The DER encoding of the PrivateKeyInfo structure from <a href="#RFC5208">RFC 5208</a>.</dd>
                <dt><code>spki</code></dt>
                <dd>The DER encoding of the SubjectPublicKeyInfo structure from <a href="#RFC5280">RFC 5280</a>.</dd>
                <dt><code>jwk</code></dt>
                <dd>The key is represented as JSON according to the JSON Web Key format.</dd>
              </dl>
            </dd>
          </dl>
        </div>

        <div id="subtlecrypto-interface-methods" class="section">
          <h3>Methods and Parameters</h3>
          <div class="ednote">
            <p>
              All errors should be reported asynchronously. It is an open issue how to document that
              this should apply to WebIDL type mapping errors. Also, WebIDL type mapping for
              Algorithm input parameters needs to use the correct Algorithm subclass expected
              by the WebCrypto algorithm, not the Algorithm super-class specified in the function
              prototype.
            </p>
          </div>
          <div id="SubtleCrypto-method-encrypt" class="section">
            <h4>The encrypt method</h4>
            <p>
              The <dfn id="dfn-SubtleCrypto-method-encrypt"><code>encrypt</code></dfn>
              method returns a new Promise object that will encrypt data using
              the specified 
              <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> with
              the supplied <a href="#dfn-Key"><code>Key</code></a>. It must act
              as follows:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>key</var> and <var>data</var> be the
                  <code>algorithm</code>, <code>key</code> and <code>data</code> parameters
                  passed to the <a href="#dfn-SubtleCrypto-method-encrypt">encrypt</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>

              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the encrypt
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>key</var> does not
                  contain an entry that is a case-sensitive string match for <code>"encrypt"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>ciphertext</var> be the result of performing the encrypt
                  operation specified by <var>normalizedAlgorithm</var> using <var>key</var>
                  and with <var>data</var> as <var>plaintext</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>ciphertext</var> as <var>value</var>.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-decrypt" class="section">
            <h4>The decrypt method</h4>
            <p>
              The <dfn id="dfn-SubtleCrypto-method-decrypt"><code>decrypt</code></dfn>
              method returns a new Promise object that will decrypt data using the specified
              <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> with
              the supplied <a href="#dfn-Key"><code>Key</code></a>. It must act
              as follows:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>key</var> and <var>data</var> be the
                  <code>algorithm</code>, <code>key</code> and <code>data</code> parameters
                  passed to the <a href="#dfn-SubtleCrypto-method-decrypt">decrypt</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>

              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the decrypt
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>key</var> does not
                  contain an entry that is a case-sensitive string match for <code>"decrypt"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>plaintext</var> be the result of performing the decrypt
                  operation specified by <var>normalizedAlgorithm</var> using <var>key</var>
                  and with <var>data</var> as <var>ciphertext</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>plaintext</var> as <var>value</var>.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-sign" class="section">
            <h4>The sign method</h4>
            <p>
              The <dfn id="dfn-SubtleCrypto-method-sign"><code>sign</code></dfn> method
              returns a new Promise object that will sign data using the specified
              <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> with
              the supplied <a href="#dfn-Key"><code>Key</code></a>. It must act as follows:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>key</var> and <var>data</var> be the
                  <code>algorithm</code>, <code>key</code> and <code>data</code> parameters
                  passed to the <a href="#dfn-SubtleCrypto-method-sign">sign</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>

              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the sign
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>key</var> does not
                  contain an entry that is a case-sensitive string match for <code>"sign"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of performing the sign operation
                  specified by <var>normalizedAlgorithm</var> uaing <var>key</var> and with
                  <var>data</var> as <var>message</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as <var>value</var>.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-verify" class="section">
            <h4>The verify method</h4>
            <p>
              The <dfn id="dfn-SubtleCrypto-method-verify"><code>verify</code></dfn> method
              returns a new Promise object that will verify data using the specified
              <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> with
              the supplied <a href="#dfn-Key"><code>Key</code></a>. It must act as follows:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>key</var>, <var>signature</var> and <var>data</var>
                  be the <code>algorithm</code>, <code>key</code>, <code>signature</code> and
                  <code>data</code> parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-verify">verify</a> method, respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the verify
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>key</var> does not
                  contain an entry that is a case-sensitive string match for <code>"verify"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of performing the verify operation
                  specified by <var>normalizedAlgorithm</var> using <var>key</var> and
                  <var>signature</var> and with <var>data</var> as <var>message</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as <var>value</var>.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-digest" class="section">
            <h4>The digest method</h4>
            <p>
              The <dfn id="dfn-SubtleCrypto-method-digest"><code>digest</code></dfn> method returns
              a new Promise object that will digest data using the specified
              <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a>.
              It must act as follows:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var> and <var>data</var>
                  be the <code>algorithm</code> and <code>data</code> parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-digest">digest</a> method, respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the digest
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of performing the digest
                  operation specified by <var>normalizedAlgorithm</var> using <var>data</var>
                  as <var>message</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as <var>value</var>.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-generateKey" class="section">
            <h4>The generateKey method</h4>
             <p>
              When invoked, <dfn id="dfn-SubtleCrypto-method-generateKey">
              <code>generateKey</code></dfn> <span class="RFC2119">MUST</span> perform the
              following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>extractable</var> and <var>usages</var>
                  be the <code>algorithm</code>, <code>extractable</code> and <code>keyUsages</code>
                  parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-generateKey">generateKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the generate
                  key operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>usages</var> includes a value that is not a case-sensitive string match
                  for a <a href="#dfn-RecognizedKeyUsage">recognized key usage value</a>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of executing the generate key operation
                  specified by <var>normalizedAlgorithm</var> using
                  <var>extractable</var> and <var>usages</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>
          
          <div id="SubtleCrypto-method-deriveKey" class="section">
            <h4>The deriveKey method</h4>
            <p>
              When invoked, <dfn id="dfn-SubtleCrypto-method-deriveKey"><code>deriveKey</code></dfn>
              <span class="RFC2119">MUST</span> perform the following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>baseKey</var>, <var>derivedKeyType</var>,
                  <var>extractable</var> and <var>usages</var> be the <code>algorithm</code>,
                  <code>baseKey</code>, <code>derivedKeyType</code>, <code>extractable</code> and
                  <code>keyUsages</code>
                  parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-deriveKey">deriveKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the derive key
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <dl class="switch">
                  <dt>If <var>derivedKeyType</var> is null:</dt>
                  <dd>Let <var>normalizedDerivedKeyAlgorithm</var> be null.</dd>
                  <dt>Otherwise:</dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          Let <var>normalizedDerivedKeyAlgorithm</var> be the result of processing
                          <var>derivedKeyType</var> according to the
                          <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          If <var>normalizedDerivedKeyAlgorithm</var> does not describe a
                          <a href="#algorithms">registered algorithm</a> that supports the import
                          derived key operation, terminate this algorithm
                          with an error.
                        </p>
                      </li>
                    </ol>
                  </dd>
                </dl>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>baseKey</var> does not
                  contain an entry that is a case-sensitive string match for <code>"deriveKey"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>usages</var> includes a value that is not a case-sensitive string
                  match for a 
                  <a href="#dfn-RecognizedKeyUsage">recognized key usage value</a>, terminate
                  this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>length</var> be the result of executing the get key length
                  algorithm specified by <var>normalizedDerivedKeyAlgorithm</var>.
                </p>
              </li>
              <li>
                <p>
                  Let <var>secret</var> be the result of executing the derive bits operation
                  specified by <var>normalizedAlgorithm</var> using
                  <var>key</var> and <var>length</var>.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of executing the import key operation
                  specified by <var>normalizedDerivedKeyAlgorithm</var> using <code>"raw"</code> as
                  <var>format</var>, <var>secret</var> as <var>keyData</var>,
                  <var>normalizedDerivedKeyAlgorithm</var> as <var>normalizedAlgorithm</var>,
                  <var>extractable</var> and <var>usages</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-deriveBits" class="section">
            <h4>The deriveBits method</h4>
            <p>
              When invoked, <dfn id="dfn-SubtleCrypto-method-deriveBits"><code>deriveBits</code></dfn>
              <span class="RFC2119">MUST</span> perform the following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>algorithm</var>, <var>baseKey</var> and <var>length</var>,
                  be the <code>algorithm</code>,
                  <code>baseKey</code> and <code>length</code>
                  parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-deriveBits">deriveBits</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>algorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the derive bits
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>baseKey</var> does not
                  contain an entry that is a case-sensitive string match for <code>"deriveBits"</code>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be a new <a href="#dfn-ArrayBuffer">ArrayBuffer</a>
                  containing the result of executing the derive bits operation
                  specified by <var>normalizedAlgorithm</var> using <var>baseKey</var> and
                  <var>length</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-importKey" class="section">
            <h4>The <dfn id="dfn-SubtleCrypto-method-importKey">importKey</dfn> method</h4>
            <p>                  
              When invoked, the <dfn id="dfn-SubtleCrypto-method-importKey">importKey</dfn> method
              <span class="RFC2119">MUST</span> perform the following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>format</var>, <var>keyData</var>, <var>algorithm</var>,
                  <var>extractable</var> and <var>usages</var>,
                  be the <code>format</code>, <code>keyData</code>, <code>algorithm</code>,
                  <code>extractable</code> and <code>keyUsages</code>
                  parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-importKey">importKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>

              <li>
                <dl class="switch">
                  <dt>If <var>algorithm</var> is not null:</dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          Let <var>normalizedAlgorithm</var> be the result of processing
                          <var>algorithm</var> according to the
                          <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          If <var>normalizedAlgorithm</var> does not describe a
                          <a href="#algorithms">registered algorithm</a> that supports the import key
                          operation, terminate this algorithm with an error.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>
                    Let <var>normalizedAlgorithm</var> be null.
                  </dd>
                </dl>
              </li>
              <li>
                <p>
                  If <var>format</var> is not a case-sensitive string match for
                  a <a href="#dfn-RecognizedKeyFormats">recognized key
                  format value</a>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>usages</var> includes a value that is not a case-sensitive string match
                  for a
                  <a href="#dfn-RecognizedKeyUsage">recognized key usage value</a>,
                  terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the <a href="#dfn-Key">Key</a> object that
                  results from performing the import key operation specified by
                  <var>normalizedAlgorithm</var> using <var>keyData</var>,
                  <var>format</var>, <var>extractable</var> and <var>usages</var>.
                </p>
                <div class="ednote">
                  <p>
                    TODO: Specify how to identify the correct algorithm for the case
                    where <var>normalizedAlgorithm</var> is null, or remove that case.
                  </p>
                </div>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-exportKey" class="section">
            <h4>The <dfn id="dfn-SubtleCrypto-method-exportKey">exportKey</dfn> method</h4>
            <p>
              When invoked, the <dfn id="dfn-SubtleCrypto-method-exportKey">exportKey</dfn> method
              <span class="RFC2119">MUST</span> perform the following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>format</var> and <var>key</var> be the <code>format</code>
                  and <code>key</code> parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-importKey">importKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
  
              <li>
                <p>
                  If <var>format</var> is not a case-sensitive string match for a
                  <a href="#dfn-RecognizedKeyFormats">recognized key
                  format value</a>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-extractable">extractable</a> property of <var>key</var>
                  is false, terminate this algorithm with an error.
                </p>         
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of performing the export key operation
                  specified by the <a href="#dfn-Key-algorithm">algorithm</a>
                  property of <var>key</var> using <var>key</var> and <var>format</var>.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-wrapKey" class="section">
            <h4>The wrapKey method</h4>
            <p>
              When invoked, the <dfn id="dfn-SubtleCrypto-method-wrapKey">wrapKey</dfn> method <span
              class="RFC2119">MUST</span> perform the following steps:
            </p>
            <ol>
              <li>
                <p>
                  Let <var>format</var>, <var>key</var>, <var>wrappingKey</var> and
                  <var>wrapAlgorithm</var> be the <code>format</code>, <code>key</code>,
                  <code>wrappingKey</code> and <code>wrapAlgorithm</code> parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-wrapKey">wrapKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>

              <li>
                <p>
                  Let <var>normalizedAlgorithm</var> be the result of processing
                  <var>wrapAlgorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the encrypt or wrap
                  key operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>format</var> is not a case-sensitive string match for algorithm a
                  <a href="#dfn-RecognizedKeyFormats">recognized key
                  format value</a>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>wrappingKey</var>
                  does not contain an entry that is a case-sensitive string match for
                  <code>"wrapKey"</code>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-extractable">extractable</a> property of <var>key</var>
                  is false, terminate this algorithm with an error.
                </p>         
              </li>
              <li>
                <p>
                  Let <var>bytes</var> be the result of performing the export key operation specified
                  the <a href="#dfn-Key-algorithm">algorithm</a>
                  property of <var>key</var> using <var>key</var> and <var>format</var>.
                </p>
              </li>
              <li>
                <p>
                 If the export key operation failed, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <dl class="switch">
                  <dt>If <var>normalizedAlgorithm</var> supports the wrap key operation:</dt>
                  <dd>
                    <p>
                      Let <var>result</var> be the result of performing the wrap key operation
                      specified by <var>normalizedAlgorithm</var> with <var>wrappingKey</var>
                      as <var>key</var> and <var>bytes</var> as <var>plaintext</var>.
                    </p>
                  </dd>
                  <dt>Otherwise, if <var>normalizedAlgorithm</var> supports the encrypt operation:</dt>
                  <dd>
                    <p>
                      Let <var>result</var> be the result of performing the encrypt operation
                      specified by <var>normalizedAlgorithm</var> with <var>wrappingKey</var>
                      as <var>key</var> and <var>bytes</var> as <var>plaintext</var>.
                    </p>
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>Terminate this algorithm with an error.</dd>
                </dl>
              </li>
              <li>
                <p>
                  If the wrap key or encrypt operation failed, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>

          <div id="SubtleCrypto-method-unwrapKey" class="section">
            <h4>The unwrapKey method</h4>
            <p>
              When invoked, the <dfn id="dfn-SubtleCrypto-method-unwrapKey">unwrapKey</dfn> method
              <span class="RFC2119">MUST</span> perform the following steps: 
            </p>
            <ol>
            <li>
                <p>
                  Let <var>format</var>, <var>wrappedKey</var>, <var>unwrappingKey</var>,
                  <var>unwrapAlgorithm</var>, <var>unwrappedKeyAlgorithm</var>,
                  <var>extractable</var> and <var>usages</var>,
                  be the <code>format</code>, <code>wrappedKey</code>, <code>unwrappingKey</code>,
                  <code>unwrapAlgorithm</code>, <code>unwrappedKeyAlgorithm</code>,
                  <code>extractable</code> and <code>keyUsages</code>
                  parameters passed to the
                  <a href="#dfn-SubtleCrypto-method-unwrapKey">unwrapKey</a> method,
                  respectively.
                </p>
              </li>
              <li>
                <p>
                  Let <var>promise</var> be a new Promise object and <var>resolver</var> its
                  associated resolver object.
                </p>
              </li>
              <li>
                <p>
                  Return <var>promise</var> and asynchronously perform the remaining steps.
                </p>
              </li>
              <li>
                <p>
                  If an error occurs, run these substeps and then terminate the algorithm:
                </p>
                <ol>
                  <li>
                    <p>
                      Let <var>result</var> be <code>null</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Execute <var>resolver</var>'s <code>reject(value)</code> algorithm, with
                      <var>result</var> as the <code>value</code> argument.
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  Determine whether to reject the algorithm with a DOMError or a
                  <code>null</code> result.
                </div>
              </li>
              <li>
                <p>
                  Let <var>normalizedUnwrapAlgorithm</var> be the result of processing
                  <var>unwrapAlgorithm</var> according to the
                  <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                </p>
              </li>
              <li>
                <p>
                  If <var>normalizedUnwrapAlgorithm</var> does not describe a
                  <a href="#algorithms">registered algorithm</a> that supports the unwrapKey
                  operation, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <dl class="switch">
                  <dt>If <var>unwrappedKeyAlgorithm</var> is not null:</dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          Let <var>normalizedKeyAlgorithm</var> be the result of processing
                          <var>unwrappedKeyAlgorithm</var> according to the
                          <a href="#algorithm-normalizing-rules">algorithm normalizing rules</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          If <var>normalizedKeyAlgorithm</var> does not describe a
                          <a href="#algorithms">registered algorithm</a> that supports the importKey
                          operation, terminate this algorithm with an error.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>Let <var>normalizedKeyAlgorithm</var> be <code>null</code>.</dd>
                </dl>
              </li>
              <li>
                <p>
                  If the <a href="#dfn-Key-usages">usages</a> property of <var>unwrappingKey</var>
                  does not contain an entry that is a case-sensitive string match for
                  <code>"unwrapKey"</code>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>format</var> is not a case-sensitive string match for a
                  <a href="#dfn-RecognizedKeyFormats">recognized key
                  format value</a>, terminate this algorithm with an error.
                </p>
              </li>
              <li>
                <p>
                  If <var>usages</var> includes a value that is not a case-sensitive string match
                  for a  <a href="#dfn-RecognizedKeyUsage">recognized key usage value</a>, terminate
                  this algorithm with an error.
                </p>
              </li>
              <li>
                <dl class="switch">
                  <dt>If <var>normalizedUnwrapAlgorithm</var> supports an unwrap key operation:</dt>
                  <dd>
                    Let <var>bytes</var> be the result of performing the unwrap key operation
                    specified by <var>normalizedUnwrapAlgorithm</var> with
                    <var>unwrappingKey</var> as <var>key</var> and <var>wrappedKey</var> as
                    <var>ciphertext</var>.
                  </dd>
                  <dt>
                    Otherwise, if <var>normalizedUnwrapAlgorithm</var> supports a decrypt
                    operation:
                  </dt>
                  <dd>
                    Let <var>bytes</var> be the result of performing the decrypt operation
                    specified by <var>normalizedUnwrapAlgorithm</var> with
                    <var>unwrappingKey</var> as <var>key</var> and <var>wrappedKey</var> as
                    <var>ciphertext</var>.
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>Terminate this algorithm with an error.</dd>
                </dl>
              </li>
              <li>
                <p>
                  If the unwrap key or decrypt operation failed, terminate this algorithm with an
                  error.
                </p>
              </li>
              <li>
                <p>
                  Let <var>result</var> be the result of performing the import key operation
                  specified by <var>normalizedKeyAlgorithm</var> using
                  <var>format</var>, <var>usages</var> and <var>extractable</var> and with
                  <var>bytes</var> as <var>keyData</var>.
                  <div class="ednote">
                    <p>
                      TODO: Specify how to identify the correct algorithm for the case
                      where <var>normalizedKeyAlgorithm</var> is null, or remove that case.
                    </p>
                  </div>
                </p>
              </li>
              <li>
                <p>
                   If the import key algorithm failed, terminate this algorithm with an error.
                 </p>
              </li>
              <li>
                <p>
                  Execute <var>resolver</var>'s <code>resolve(value)</code> algorithm, with
                  <var>result</var> as the <code>value</code> argument.
                </p>
              </li>
            </ol>
          </div>
        </div>
      </div>

      <div id="WorkerCrypto-interface" class="section">
        <h2>WorkerCrypto interface</h2>
        <x:codeblock language="idl">
interface <dfn id="dfn-WorkerCrypto">WorkerCrypto</dfn> {
};

<a href="#dfn-WorkerCrypto">WorkerCrypto</a> implements <a href="#dfn-RandomSource">RandomSource</a>;

partial interface <a href="http://www.w3.org/TR/workers/#workerglobalscope">WorkerGlobalScope</a> {
  readonly attribute <a href="#dfn-WorkerCrypto">WorkerCrypto</a> crypto;
};
        </x:codeblock>
        <div id="WorkerCrypto-description" class="section">
          <h3>Description</h3>
          <p>
            The <a href="#dfn-WorkerCrypto">WorkerCrypto</a> interface provides cryptographic
            functionality for background scripts, as specified by Web Workers [
            <a href="">Web Workers</a>].
          </p>
          <div class="ednote">
            <p>
              A unique interface exposing only a subset of the <a href="#crypto-interface"><code>Crypto</code></a>
              is provided as it has not yet been determined how <a href="#key-interface"><code>Key</code></a>s
              should be shared amongst threads, nor how user interaction should be managed for
              operations that may require user consent.
            </p>
          </div>
        </div>
      </div>

      <div id="big-integer" class="section">
        <h2>BigInteger</h2>
        <x:codeblock language="idl">
typedef Uint8Array <dfn id="dfn-BigInteger">BigInteger</dfn>;
        </x:codeblock>
        <p>
          The <a href="#dfn-BigInteger">BigInteger</a> typedef is a <code>Uint8Array</code> that
          holds an arbitrary magnitude unsigned integer in big-endian order. Values read from
          the API SHALL have minimal typed array length (that is, at most 7 leading zero bits,
          except the value 0 which shall have length 8 bits). The API SHALL accept values with
          any number of leading zero bits, including the empty array, which represents zero.
        </p>

        <div class="note">
          <strong>Implementation Note:</strong> Since the integer is unsigned, the highest order bit
          is NOT a sign bit. Implementors should take care when mapping to big integer
          implementations that expected signed integers.
        </div>
      </div>
      
      <div id="keypair" class="section">
        <h2>KeyPair</h2>
        <x:codeblock language="idl">
interface <dfn id="dfn-KeyPair">KeyPair</dfn> {
  readonly attribute <a href="#dfn-Key">Key</a> publicKey;
  readonly attribute <a href="#dfn-Key">Key</a> privateKey;
};
        </x:codeblock>
        <p>
          The <a href="#dfn-KeyPair">KeyPair</a> interface represents an
          asymmetric key pair that is comprised of both public and private keys.
        </p>
      </div>

      <div id="algorithms" class="section">
        <h2>Algorithms</h2>
        <div class="ednote">
          <p>
            Note: All algorithms listed should be considered as "features at risk",
            barring implementors adopting them. Their inclusion in the Editor's Draft
            reflects requests for their inclusion by members of the community, and are
            included as an exercise to ensure the robustness of the API defined in this
            specification.
          </p>
          <p>
            As such, the list of algorithms, and the recommendations, may be significantly
            altered in future revisions.
          </p>
        </div>
        <div id="algorithms-index" class="section">
          <h3>Registered algorithms</h3>
          <table>
            <thead>
              <tr>
                <th>Algorithm name</th>
                <th scope="col">encrypt</th>
                <th scope="col">decrypt</th>
                <th scope="col">sign</th>
                <th scope="col">verify</th>
                <th scope="col">digest</th>
                <th scope="col">generateKey</th>
                <th scope="col">deriveKey</th>
                <th scope="col">deriveBits</th>
                <th scope="col">importKey</th>
                <th scope="col">exportKey</th>
                <th scope="col">wrapKey</th>
                <th scope="col">unwrapKey</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><a href="#rsaes-pkcs1">RSAES-PKCS1-v1_5</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#rsassa-pkcs1">RSASSA-PKCS1-v1_5</a></td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#rsa-pss">RSA-PSS</a></td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#rsa-oaep">RSA-OAEP</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td /> 
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#ecdsa">ECDSA</a></td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#ecdh">ECDH</a></td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#aes-ctr">AES-CTR</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#aes-cbc">AES-CBC</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#aes-cmac">AES-CMAC</a></td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#aes-gcm">AES-GCM</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#aes-cfb">AES-CFB</a></td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#aes-kw">AES-KW</a></td>
                <td></td>
                <td></td>
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
              </tr>
              <tr>
                <td><a href="#hmac">HMAC</a></td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#dh">DH</a></td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#sha">SHA-1</a></td>
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#sha">SHA-224</a></td>
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#sha">SHA-256</a></td>
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#sha">SHA-384</a></td>
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#sha">SHA-512</a></td>
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#concatkdf">CONCAT</a></td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#hkdf-ctr">HKDF-CTR</a></td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
              </tr>
              <tr>
                <td><a href="#pbkdf2">PBKDF2</a></td>
                <td />
                <td />
                <td />
                <td />
                <td />
                <td />
                <td>&#10004;</td>
                <td>&#10004;</td>
                <td />
                <td />
                <td />
                <td />
              </tr>
            </tbody>
          </table>
        </div>
        <div id="recommended-algorithms" class="section">
          <h3>Recommended algorithms</h3>
          <p class="norm">This section is non-normative</p>
          <p>
            As the API is meant to be extensible in order to keep up with future developments within
            cryptography and to provide flexibility, there are no strictly required algorithms. Thus
            users of this API should check to see what algorithms are currently recommended and
            supported by implementations.
          </p>
          <p>
            However, in order to promote interoperability for developers, there are a number of
            recommended algorithms. The recommended algorithms are: 
          </p>
          <ul>
            <li>
                <a href="#hmac">HMAC</a> using <a href="#alg-sha-1">SHA-1</a>
            </li>
            <li>
                <a href="#hmac">HMAC</a> using <a href="#alg-sha-256">SHA-256</a>
            </li>
            <li>
                <a href="#rsassa-pkcs1">RSASSA-PKCS1-v1_5</a> using
                <a href="#alg-sha-256">SHA-1</a>
            </li>
            <li>
                <a href="#rsa-pss">RSA-PSS</a> using <a href="#alg-sha-256">SHA-256</a>
                and MGF1 with <a href="#alg-sha-256">SHA-256</a>.
            </li>
            <li>
                <a href="#rsa-oaep">RSA-OAEP</a> using <a href="#alg-sha-256">SHA-256</a>
                and MGF1 with <a href="#alg-sha-256">SHA-256</a>.
            </li>
            <li>
                <a href="#ecdsa">ECDSA</a> using <a href="#dfn-NamedCurve-p256">P-256</a>
                curve and <a href="#alg-sha-256">SHA-256</a>
            </li>
            <li><a href="#aes-cbc">AES-CBC</a></li>
          </ul>
          <p>
            To see the results of test-cases between implementations, please see the [@@Upcoming]
            Web Cryptography Test Cases Working Group.
          </p>
        </div>
        <div id="defining-an-algorithm" class="section">
          <h3>Defining an algorithm</h3>
          <p>
            Each algorithm that is to be exposed via the Web Cryptography API
            <span class="RFC2119">SHOULD</span> be registered via the Web Cryptography working group,
            and <span class="RFC2119">MUST</span> include all of the following details. Algorithms
            that are not registered via these means, but are exposed via this API,
            <span class="RFC2119">MUST</span> be processed as if the sections had been defined.
          </p>
          <div id="recognized-algorithm-name" class="section">
            <h4>Recognized algorithm name</h4>
            <p>
              Each registered algorithm <span class="RFC2119">MUST</span> have a canonical name
              for which applications can refer to the algorithm. The canonical name
              <span class="RFC2119">MUST</span> contain only ASCII characters and
              <span class="RFC2119">MUST NOT</span> equal any other canonical name or
              <a href="#dfn-algorithm-alias">algorithm alias</a> when every character in both names
              are converted to lower case.
            </p>
          </div>
          <div id="supported-operations" class="section">
            <h4>Supported operations</h4>
            <p>
              Each registered algorithm <span class="RFC2119">MUST</span> define the operations
              that it supports.
            </p>
          </div>
          <div id="algorithm-specific-params" class="section">
            <h4>Algorithm-specific parameters</h4>
            <p>
              Each registered algorithm <span class="RFC2119">MUST</span> define the expected
              parameters, if any, that should be exposed via the <a href="#dfn-Algorithm">Algorithm</a>
              dictionary for every <a href="#supported-operations">supported operation</a>.
            </p>
          </div>
          <div id="algorithm-result" class="section">
            <h4>Algorithm results</h4>
            <p>
              Each registered algorithm <span class="RFC2119">MUST</span> define the contents
              of the result of performing the underlying cryptographic operation for every
              <a href="#supported-operations">supported operation</a>.
            </p>
          </div>
          <div id="algorithm-alias" class="section">
            <h4><dfn id="dfn-algorithm-alias">Algorithm aliases</dfn></h4>
            <p>
              Each registered algorithm <span class="RFC2119">MAY</span> define one or more aliases
              that may define a fully normalized <a href="#dfn-Algorithm">Algorithm</a> object.
            </p>
            <p>
              Each algorithm alias <span class="RFC2119">MUST</span> follow the same naming rules
              as the <a href="#recognized-algorithm-name">recognized algorithm name</a>.
            </p>
          </div>
        </div>

        <div id="rsaes-pkcs1" class="section">
          <h3>RSAES-PKCS1-v1_5</h3>
          <div id="rsaes-pkcs1-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"RSAES-PKCS1-v1_5"</code> algorithm identifier is used to perform encryption
              and decryption ordering to the RSAES-PKCS1-v1_5 algorithm specified in
              [<cite><a href="#RFC3447">RFC3447</a></cite>].
            </p>
          </div>
          <div id="rsaes-pkcs1-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"RSAES-PKCS1-v1_5"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>encrypt</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>decrypt</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-RsaKeyGenParams">RsaKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="RsaKeyGenParams-dictionary" class="section">
            <h4>RsaKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-RsaKeyGenParams">RsaKeyGenParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The length, in bits, of the RSA modulus</span>
  [EnforceRange] unsigned long modulusLength;
  <span class="comment">// The RSA public exponent</span>
  <a href="#dfn-BigInteger">BigInteger</a> publicExponent;
};
            </x:codeblock>
          </div>
          <div id="RsaKeyAlgorithm-interface" class="section">
            <h4>RsaKeyAlgorithm interface</h4>
            <x:codeblock language="idl">
interface <dfn id="dfn-RsaKeyAlgorithm">RsaKeyAlgorithm</dfn> : <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  <span class="comment">// The length, in bits, of the RSA modulus</span>
  readonly attribute unsigned long <dfn id="dfn-RsaKeyAlgorithm-modulusLength">modulusLength</dfn>;
  <span class="comment">// The RSA public exponent</span>
  readonly attribute <a href="#dfn-BigInteger">BigInteger</a> <dfn id="dfn-RsaKeyAlgorithm-publicExponent">publicExponent</dfn>;
};
            </x:codeblock>
          </div>
          <div id="rsaes-pkcs1-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"public"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the encrytion operation defined in Section 7.2 of [<cite><a
                      href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                      as the recipient's RSA public key and the contents of <var>plaintext</var> as
                      <var>M</var>.
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          Let <var>ciphertext</var> be a new ArrayBuffer
                          containing the value <var>C</var> that results from performing the
                          operation.
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"private"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the decryption operation defined in Section 7.2 of [<cite><a
                      href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                      as the recipient's RSA private key and the contents of <var>ciphertext</var> as
                      <var>C</var>.
                     
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          Let <var>plaintext</var> be a new ArrayBuffer
                          containing the value <var>M</var> that results from performing the
                          operation.
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#dfn-RsaKeyGenParams">RsaKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate this algorithm with
                      an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an RSA key pair, as defined in [<cite><a
                      href="#RFC3447">RFC3447</a></cite>], with RSA modulus length equal to the
                      <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a> property of
                      <var>normalizedAlgorithm</var> and RSA public exponent equal to the
                      <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If generation of the key pair fails:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-RsaKeyAlgorithm">RsaKeyAlgorithm</a> object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                <var>algorithm</var> to <code>"RSAES-PKCS1-v1_5"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-modulusLength">modulusLength</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-publicExponent">publicExponent</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the public key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-Type">type</a> property of <var>publicKey</var>
                                to <code>"public"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>publicKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>publicKey</var> to true.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>publicKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "encrypt", "wrapKey" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the private key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                                to <code>"private"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>privateKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>privateKey</var> to <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>privateKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "decrypt", "unwrapKey" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                                of <var>result</var> to be <var>publicKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                                of <var>result</var> to be <var>privateKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>result</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>Let <var>keyData</var> be the key data to be imported.</p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"spki"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>spki</var> be the result of running the
                              <a href="#concept-parse-a-spki">parse a subjectPublicKeyInfo</a>
                              algorithm over <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If an error occurred while parsing, terminate this algorithm with
                              the error.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>algorithm</code> object identifier field of the
                              <code>algorithm</code> AlgorithmIdentifier field of <var>spki</var>
                              is not equivalent to the <code>rsaEncryption</code> OID defined in
                              Section 2.3.1 of <a href="#RFC3279">RFC 3279</a>, terminate this
                              algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>publicKey</var> be the result of performing the <a
                              href="#concept-parse-an-asn1-structure">parse an ASN.1 structure</a>
                              algorithm, with <var>data</var> as the
                              <code>subjectPublicKeyInfo</code> field of <var>spki</var>,
                              <var>structure</var> as the <code>RSAPublicKey</code> structure
                              specified in Section A.1.1 of <a href="#RFC3447">RFC 3447</a>, and
                              <var>exactData</var> set to true.
                            </p>
                          </li>
                          <li>
                            <p>
                              If an error occurred while parsing, terminate this algorithm with
                              an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object that
                              represents the RSA public key identified by <var>publicKey</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-Type">type</a> property of <var>key</var>
                              to <code>"public"</code>
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"pkcs8"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>privateKeyInfo</var> be the result of running the
                              <a href="#concept-parse-a-privateKeyInfo">parse a privateKeyInfo</a>
                              algorithm over <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If an error occurred while parsing, terminate this algorithm with
                              an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>algorithm</code> object identifier field of the
                              <code>privateKeyAlgorithm</code> PrivateKeyAlgorithmIdentifier field
                              of <var>privateKeyInfo</var> is not equivalent to the
                              <code>rsaEncryption</code> OID defined in Section 2.3.1 of
                              <a href="#RFC3279">RFC 3279</a>, terminate this algorithm with an
                              error.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>rsaPrivateKey</var> be the result of performing the <a
                              href="#concept-parse-an-asn1-structure">parse an ASN.1 structure</a>
                              algorithm, with <var>data</var> as the
                              <code>privateKey</code> field of <var>privateKeyInfo</var>,
                              <var>structure</var> as the <code>RSAPrivateKey</code> structure
                              specified in Section A.1.2 of <a href="#RFC3447">RFC 3447</a>, and
                              <var>exactData</var> set to true.
                            </p>
                          </li>
                          <li>
                            <p>
                              If an error occurred while parsing, terminate this algorithm with
                              an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object that
                              represents the RSA private key identified by <var>rsaPrivateKey</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-Type">type</a> property of <var>key</var>
                              to <code>"private"</code>
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be the result of running the
                              <a href="#concept-parse-a-jwk">parse a jwk</a>
                              algorithm over <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>"kty"</code> field of <var>jwk</var> is not a
                              case-sensitive string match to <code>"RSA"</code>, terminate
                              this algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>"use"</code> field of <var>jwk</var> is present, and is
                              not a case-sensitive string match to <code>"enc"</code>, terminate
                              this algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                              is invalid according to the requirements of
                              <a href="#jwk">JSON Web Key</a> or
                              does not contain all of the specified <var>usages</var> values,
                              terminate this algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                              not a case-sensitive string match to <code>"RSA1_5"</code>, terminate
                              this algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <code>"d"</code> field of <var>jwk</var> is present:</dt>
                              <dd>
                                <ol>
                                  <li>
                                    <p>
                                      If <var>jwk</var> does not meet the requirements of
                                      Section 6.3.2 of <a href="#jwa">JSON Web
                                      Algorithms</a>, terminate this algorithm with an error.
                                    </p>
                                  </li>
                                  <li>
                                    <p>
                                      Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object
                                      that represents the RSA private key identified by interpreting
                                      <var>jwk</var> according to Section 6.3.2 of <a href="#jwa">
                                      JSON Web Algorithms</a>.
                                    </p>
                                  </li>
                                  <li>
                                    <p>
                                      Set the <a href="#dfn-Key-Type">type</a> property of
                                      <var>key</var> to <code>"private"</code>
                                    </p>
                                  </li>
                                </ol>
                              </dd>
                              <dt>Otherwise:</dt>
                              <dd>
                                <ol>
                                  <li>
                                    <p>
                                      If <var>jwk</var> does not meet the requirements of
                                      Section 6.3.1 of <a href="#jwa">JSON Web
                                      Algorithms</a>, terminate this algorithm with an error.
                                    </p>
                                  </li>
                                  <li>
                                    <p>
                                      Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object
                                      that represents the RSA public key identified by interpreting
                                      <var>jwk</var> according to Section 6.3.1 of <a href="#jwa">
                                      JSON Web Algorithms</a>.
                                    </p>
                                  </li>
                                  <li>
                                    <p>
                                      Set the <a href="#dfn-Key-Type">type</a> property of
                                      <var>key</var> to <code>"public"</code>
                                    </p>
                                  </li>
                                </ol>
                              </dd>
                            </dl>
                          </li>
                        </ol>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-RsaKeyAlgorithm">RsaKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                      <var>algorithm</var> to <code>"RSAES-PKCS1-v1_5"</code>
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-RsaKeyAlgorithm-modulusLength">modulusLength</a>
                      property of <var>algorithm</var> to the length, in bits, of the RSA public
                      modulus.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-RsaKeyAlgorithm-publicExponent">publicExponent</a>
                      property of <var>algorithm</var> to the <a href="#dfn-BigInteger">BigInteger</a>
                      representation of the RSA public exponent.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                      <var>key</var> to <var>algorithm</var>
                    </p>
                  </li>
                  <li>
                    <p>Return <var>key</var>.</p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd></dd>
            </dl>
          </div>
        </div>

        <div id="rsassa-pkcs1" class="section">
          <h3>RSASSA-PKCS1-v1_5</h3>
          <div id="rsassa-pkcs1-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"RSASSA-PKCS1-v1_5"</code> algorithm identifier is used to perform
              signing and verification using the RSASSA-PKCS1-v1_5 algorithm specified in
              [<cite><a href="#RFC3447">RFC3447</a></cite>].
            </p>
          </div>
          <div id="rsassa-pkcs1-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"RSASSA-PKCS1-v1_5"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>sign</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>verify</td>
                  <td>None</td>
                  <td>boolean</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-RsaHashedImportParams">RsaHashedImportParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="RsaHashedKeyGenParams-dictionary" class="section">
            <h4>RsaHashedKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</dfn> : <a href="#dfn-RsaKeyGenParams">RsaKeyGenParams</a> {
  <span class="comment">// The hash algorithm to use</span> 
  <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> <dfn id="dfn-RsaHashedKeyGenParams-hash">hash</dfn>;
};
            </x:codeblock>
          </div>
          <div id="RsaHashedKeyAlgorithm-interface" class="section">
            <h4>RsaHashedKeyAlgorithm interface</h4>
            <x:codeblock language="idl">
[NoInterfaceObject]
interface <dfn id="dfn-RsaHashedKeyAlgorithm">RsaHashedKeyAlgorithm</dfn> : <a href="#dfn-RsaKeyAlgorithm">RsaKeyAlgorithm</a> {
  <span class="comment">// The hash algorithm that is used with this key</span>
  readonly attribute <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> <dfn id="dfn-RsaHashedKeyAlgorithm-hash">hash</dfn>;
};
            </x:codeblock>
          </div>
          <div id="RsaHashedImportParams-dictionary" class="section">
            <h4>RsaHashedImportParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-RsaHashedImportParams">RsaHashedImportParams</dfn> {
  <span class="comment">// The hash algorithm to use</span>
  <a href="#dfn-AlgorithmIdentifier">AlgorithmIdentifier</a> <dfn id="dfn-RsaHashedImportParams-hash">hash</dfn>;
};
            </x:codeblock>
            <div class="ednote">
              <p>
                Should this be folded into RsaHashedKeyGenParams and rely on the optional nature of the
                dictionary fields?
              </p>
            </div>
          </div>
          <div id="rsassa-pkcs1-operations" class="section">
            <h4>Operations</h4>
              <dt>Sign</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"private"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the signature generation operation defined in Section 8.2 of
                      [<cite><a href="#RFC3447">RFC3447</a></cite>] with the key represented by
                      <var>key</var> as the signer's private key and the contents of
                      <var>message</var> as <var>M</var> and using the hash function specified in
                      the <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> as the
                      Hash option for the EMSA-PKCS1-v1_5 encoding method.
                      
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          Let <var>signature</var> be the value <var>S</var> that results from
                          performing the operation.
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>

              <dt>Verify</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"public"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the signature verification operation defined in Section 8.2 of
                      [<cite><a href="#RFC3447">RFC3447</a></cite>] with the key represented by
                      <var>key</var> as the signer's RSA public key and the contents of
                      <var>message</var> as <var>M</var> and <var>signature</var> as <var>S</var>
                      and using the hash function specified in the
                      <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of
                      <var>key</var> as the Hash option for the EMSA-PKCS1-v1_5 encoding method.
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          Let <var>result</var> be a boolean with value true if the
                          result of the operations was "valid signature" and a boolean with value
                          false otherwise.
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a> are not present
                      in <var>normalizedAlgorithm</var>, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an RSA key pair, as defined in [<cite><a
                      href="#RFC3447">RFC3447</a></cite>], with RSA modulus length equal to the
                      <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a> property of
                      <var>normalizedAlgorithm</var> and RSA public exponent equal to the
                      <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If generation of the key pair fails:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-RsaHashedKeyAlgorithm">RsaHashedKeyAlgorithm</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                <var>algorithm</var> to <code>"RSASSA-PKCS1-v1_5"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-modulusLength">modulusLength</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-publicExponent">publicExponent</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property
                                of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaHashedKeyGenParams">hash</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the public key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                                to <code>"public"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>publicKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>publicKey</var> to true.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>publicKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "verify" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the private key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                                to <code>"private"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>privateKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>privateKey</var> to <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>privateKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "sign" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                                of <var>result</var> to be <var>publicKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                                of <var>result</var> to be <var>privateKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>result</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
                <div class="ednote">
                  <p>
                    TODO: Specify how the normalizedAlgorithm needs to be an instance of
                    the relevant RsaHashed*Params dictionary, with particular attention to the fact
                    that WebIDL violations should be handled asynchronously.
                  </p>
                  <p>
                    TODO: Specify the mapping between key.algorithm.hash and the appropriate Hash
                    functions (and back to OID).
                  </p>
                </div>
              </dd>
              <dt>Import Key</dt>
              <dd></dd>
              <dt>Export Key</dt>
              <dd></dd>
          </div>
        </div>

        <div id="rsa-pss" class="section">
          <h3>RSA-PSS</h3>
          <div id="rsa-pss-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"RSA-PSS"</code> algorithm identifier is used to perform signing
              and verification using the RSASSA-PSS algorithm specified in
              [<cite><a href="#RFC3447">RFC3447</a></cite>], using the mask generation
              formula MGF1.
            </p>
          </div>
          <div id="rsa-pss-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"RSA-PSS"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>sign</td>
                  <td><a href="#dfn-RsaPssParams">RsaPssParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>verify</td>
                  <td><a href="#dfn-RsaPssParams">RsaPssParams</a></td>
                  <td>boolean</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-RsaHashedImportParams">RsaHashedImportParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="RsaPssParams-dictionary" class="section">
            <h4>RsaPssParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-RsaPssParams">RsaPssParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The desired length of the random salt</span>
  [EnforceRange] unsigned long saltLength;
};
            </x:codeblock>
          </div>
          <div id="rsa-pss-operations" class="section">
            <h4>Operations</h4>
            <dt>Sign</dt>
            <dd>
              <ol>
                <li>
                  <p>
                    If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                    is not a case-sensitive string match for <code>"private"</code>, terminate this
                    algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If any of the members of <a href="#dfn-RsaPssParams">RsaPssParams</a> are not
                    present in <var>normalizedAlgorithm</var>, terminate this algorithm with an
                    error.
                  </p>
                </li>
                <li>
                  <p>
                    Perform the signature generation operation defined in Section 8.1 of [<cite><a
                    href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                    as the signer's private key, <var>K</var>, and the contents of
                    <var>message</var> as the message to be signed, <var>M</var>, and using the
                    hash function specified by the
                    <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                    <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                    as the Hash option, MGF1 (defined in Section B.2.1 of
                    [<cite><a href="#RFC3447">RFC3447</a></cite>]) as the MGF option and
                    the <a href="#dfn-RsaPssParams-saltLength">saltLength</a> property of
                    <var>normalizedAlgorithm</var> as the salt length option for the EMM-PSS-ENCODE
                    operation.
                    <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>Let <var>signature</var> be a new <code>ArrayBuffer</code>
                          containing the signature, S, that results from performing the operation.</dd>
                    </dl>
                  </p>
                </li>
              </ol>
            </dd>

            <dt>Verify</dt>
            <dd>
              <ol>
                <li>
                  <p>
                    If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                    is not a case-sensitive string match for <code>"public"</code>, terminate this
                    algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If any of the members of <a href="#dfn-RsaPssParams">RsaPssParams</a> are not
                    present in <var>normalizedAlgorithm</var>, terminate this algorithm with an
                    error.
                  </p>
                </li>
                <li>
                  <p>
                    Perform the signature verification operation defined in Section 8.1 of [<cite><a
                    href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                    as the signer's RSA public key and the contents of <var>message</var> as
                    <var>M</var> and the contents of <var>signature</var> as <var>S</var> and using
                    the hash function specified by the
                    <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                    <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> as the
                    Hash option, MGF1 (defined in Section B.2.1 of
                    [<cite><a href="#RFC3447">RFC3447</a></cite>]) as the MGF option and the
                    <a href="#dfn-RsaPssParams-saltLength">saltLength</a> property of
                    <var>normalizedAlgorithm</var> as the salt length option for the
                    EMSA-PSS-VERIFY operation.
                    <dl class="switch">
                      <dt>If performing the operation results in an error:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                      <dt>Otherwise:</dt>
                      <dd>Let <var>result</var> be a boolean with value true if the
                        result of the operation was "valid signature" and a boolean with value
                        false otherwise.</dd>
                    </dl>
                  </p>
                </li>
              </ol>
            </dd>

            <dt>Generate Key</dt>
            <dd>
              <ol>
                <li>
                  <p>
                    If any of the members of
                    <a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a> are not present
                    in <var>normalizedAlgorithm</var>, terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If <var>usages</var> contains an entry which is not a case-sensitive string
                    match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                    algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    Generate an RSA key pair, as defined in [<cite><a
                    href="#RFC3447">RFC3447</a></cite>], with RSA modulus length equal to the
                    <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a> property of
                    <var>normalizedAlgorithm</var> and RSA public exponent equal to the
                    <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a> property of
                    <var>normalizedAlgorithm</var>.
                    <dl class="switch">
                      <dt>If generation of the key pair fails:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                      <dt>Otherwise:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>algorithm</var> be a new
                              <a href="#dfn-RsaHashedKeyAlgorithm">RsaHashedKeyAlgorithm</a>
                              object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>algorithm</var> to <code>"RSA-PSS"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the
                              <a href="#dfn-RsaKeyAlgorithm-modulusLength">modulusLength</a>
                              property of <var>algorithm</var> to equal the
                              <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a>
                              property of <var>normalizedAlgorithm</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the
                              <a href="#dfn-RsaKeyAlgorithm-publicExponent">publicExponent</a>
                              property of <var>algorithm</var> to equal the
                              <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a>
                              property of <var>normalizedAlgorithm</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property
                              of <var>algorithm</var> to equal the
                              <a href="#dfn-RsaHashedKeyGenParams">hash</a> property of
                              <var>normalizedAlgorithm</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                              representing the public key of the generated key pair.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                              to <code>"public"</code>
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                              <var>publicKey</var> to be <var>algorithm</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>publicKey</var> to true.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-usages">usages</a> property of
                              <var>publicKey</var> to be the
                              <a href="concept-usage-intersection">usage intersection</a> of
                              <var>usages</var> and <code>[ "verify" ]</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                              representing the private key of the generated key pair.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                              to <code>"private"</code>
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                              <var>privateKey</var> to be <var>algorithm</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>privateKey</var> to <var>extractable</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#dfn-Key-usages">usages</a> property of
                              <var>privateKey</var> to be the
                              <a href="concept-usage-intersection">usage intersection</a> of
                              <var>usages</var> and <code>[ "sign" ]</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                              object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                              of <var>result</var> to be <var>publicKey</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                              of <var>result</var> to be <var>privateKey</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Return <var>result</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </p>
                </li>
              </ol>
            </dd>
            <dt>Import Key</dt>
            <dd></dd>
            <dt>Export Key</dt>
            <dd></dd>
          </div>

          <div class="ednote">
            <p>
              TODO: Specify how the normalizedAlgorithm needs to be an instance of
              the relevant RsaHashed*Params dictionary, with particular attention to the fact
              that WebIDL violations should be handled asynchronously.
            </p>
            <p>
              TODO: Specify the mapping between key.algorithm.hash and the appropriate Hash
              functions (and back to OID).
            </p>
          </div>
        </div>

        <div id="rsa-oaep" class="section">
          <h3>RSA-OAEP</h3>
          <div id="rsa-oaep-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"RSA-OAEP"</code> algorithm identifier is used to perform encryption
              and decryption ordering to the RSAES-OAEP algorithm specified in
              [<cite><a href="#RFC3447">RFC3447</a></cite>], using the mask
              generation function MGF1.
            </p>
          </div>
          <div id="rsa-oaep-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"RSA-OAEP"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>encrypt</td>
                  <td><a href="#dfn-RsaOaepParams">RsaOaepParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>decrypt</td>
                  <td><a href="#dfn-RsaOaepParams">RsaOaepParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-RsaHashedImportParams">RsaHashedImportParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>

          <div id="rsa-oaep-params" class="section">
            <h4>RsaOaepParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-RsaOaepParams">RsaOaepParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The optional label/application data to associate with the message</span>
  CryptoOperationData? label;
};
            </x:codeblock>
          </div>
          <div id="rsa-oaep-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"public"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If any of the members of <a href="#dfn-RsaOaepParams">RsaOaepParams</a> are
                      not present in <var>normalizedAlgorithm</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the encrytion operation defined in Section 7.1 of [<cite><a
                      href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                      as the recipient's RSA public key, the contents of <var>plaintext</var> as the
                      message to be encrypted, <var>M</var> and the
                      <a href="#dfn-RsaOaepParams-label">label</a> property of
                      <var>normalizedAlgorithm</var> as the label, <var>L</var>, and with the hash
                      function specified by the
                      <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> as the
                      Hash option and MGF1 (defined in Section B.2.1 of
                      [<cite><a href="#RFC3447">RFC3447</a></cite>]) as the MGF option.
                      <dl class="switch">
                          <dt>If performing the operation results in an error:</dt>
                          <dd>Terminate this algorithm with an error.</dd>
                          <dt>Otherwise:</dt>
                          <dd>
                            Let <var>ciphertext</var> be a new <code>ArrayBuffer</code>
                            containing the value <var>C</var> that results from performing the
                            operation.
                          </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"private"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If any of the members of <a href="#dfn-RsaOaepParams">RsaOaepParams</a> are
                      not present in <var>normalizedAlgorithm</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the decryption operation defined in Section 7.1 of [<cite><a
                      href="#RFC3447">RFC3447</a></cite>] with the key represented by <var>key</var>
                      as the recipient's RSA private key, the contents of <var>ciphertext</var> as
                      the cipertext to be decrypted, C, and the
                      <a href="#dfn-RsaOaepParams-label">label</a> property of
                      <var>normalizedAlgorithm</var> as the label, <var>L</var>, and with the hash
                      function specified by the
                      <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> as the
                      Hash option and MGF1
                      (defined in Section B.2.1 of [<cite><a href="#RFC3447">RFC3447</a></cite>]) as
                      the MGF option.
                      <dl class="switch">
                          <dt>If performing the operation results in an error:</dt>
                          <dd>Terminate this algorithm with an error.</dd>
                          <dt>Otherwise:</dt>
                          <dd>
                            Let <var>plaintext</var> be a new <code>ArrayBuffer</code>
                            containing the value <var>M</var> that results from performing the
                            operation.
                          </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a> are not present
                      in <var>normalizedAlgorithm</var>, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for <code>"encrypt"</code>, <code>"decrypt</code>,
                      <code>wrapKey</code> or <code>unwrapKey</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an RSA key pair, as defined in [<cite><a
                      href="#RFC3447">RFC3447</a></cite>], with RSA modulus length equal to the
                      <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a> property of
                      <var>normalizedAlgorithm</var> and RSA public exponent equal to the
                      <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If generation of the key pair fails:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-RsaHashedKeyAlgorithm">RsaHashedKeyAlgorithm</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                <var>algorithm</var> to <code>"RSA-OAEP"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-modulusLength">modulusLength</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-modulusLength">modulusLength</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the
                                <a href="#dfn-RsaKeyAlgorithm-publicExponent">publicExponent</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaKeyGenParams-publicExponent">publicExponent</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-RsaHashedKeyAlgorithm-hash">hash</a> property
                                of <var>algorithm</var> to equal the
                                <a href="#dfn-RsaHashedKeyGenParams">hash</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the public key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                                to <code>"public"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>publicKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>publicKey</var> to true.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>publicKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "encrypt", "wrapKey" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the private key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                                to <code>"private"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>privateKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>privateKey</var> to <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>privateKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "decrypt", "unwrapKey" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                                of <var>result</var> to be <var>publicKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                                of <var>result</var> to be <var>privateKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>result</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd></dd>
              <dt>Export Key</dt>
              <dd></dd>
            </dl>
          </div>
          <div class="ednote">
            <p>
              TODO: Specify how the normalizedAlgorithm needs to be an instance of
              the relevant RsaHashed*Params dictionary, with particular attention to the fact
              that WebIDL violations should be handled asynchronously.
            </p>
            <p>
              TODO: Specify the mapping between key.algorithm.hash and the appropriate Hash
              functions (and back to OID).
            </p>
          </div>
        </div>

        <div id="ecdsa" class="section">
          <h3>ECDSA</h3>
          <div id="ecdsa-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"ECDSA"</code> algorithm identifier is used to perform signing
              and verification using the ECDSA algorithm specified in
              [<cite><a href="#X9.62">X9.62</a></cite>].
            </p>
          </div>
          <div id="ecdsa-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"ECDSA"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>sign</td>
                  <td><a href="#dfn-EcdsaParams">EcdsaParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>verify</td>
                  <td><a href="#dfn-EcdsaParams">EcdsaParams</a></td>
                  <td>boolean</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-EcKeyGenParams">EcKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>

              </tbody>
            </table>
          </div>
          <div id="EcdsaParams-dictionary" class="section">
            <h4>EcdsaParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-EcdsaParams">EcdsaParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The hash algorithm to use</span>
  AlgorithmIdentifier hash;
};
            </x:codeblock>
          </div>
          <div id="EcKeyAlgorithm-interface" class="section">
            <x:codeblock language="idl">
[NoInterfaceObject]
interface <dfn id="dfn-EcKeyAlgorithm">EcKeyAlgorithm</dfn> : <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  <span class="comment">// The named curve that the key uses</span>
  readonly attribute <a href="#dfn-NamedCurve">NamedCurve</a> namedCurve;
};
            </x:codeblock>
          </div>
          <div id="EcKeyGenParams-dictionary" class="section">
            <h4>EcKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
typedef DOMString <a href="#dfn-NamedCurve">NamedCurve</a>;

dictionary <dfn id="dfn-EcKeyGenParams">EcKeyGenParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// A named curve</span>
  <a href="#dfn-NamedCurve">NamedCurve</a> namedCurve;
};
            </x:codeblock>
            <p>
              The <dfn id="dfn-NamedCurve">NamedCurve</dfn> type represents named elliptic curves,
              which are a convenient way to specify the domain parameters of well-known elliptic
              curves. The following values are recognized:
              <dl>
                <dt id="dfn-NamedCurve-p256"><code>P-256</code></dt>
                <dd>NIST recommended curve P-256, also known as <code>secp256r1</code>.</dd>
                <dt id="dfn-NamedCurve-p2384"><code>P-384</code></dt>
                <dd>NIST recommended curve P-384, also known as <code>secp384r1</code>.</dd>
                <dt id="dfn-NamedCurve-p521"><code>P-521</code></dt>
                <dd>NIST recommended curve P-521, also known as <code>secp521r1</code>.</dd>
              </dl>
            </p>
          </div>
          <div id="EcKeyImportParams-dictionary" class="section">
            <h4>EcKeyImportParams dictionary</h4>
            <x:codeblock language="idl">
typedef DOMString <a href="#dfn-NamedCurve">NamedCurve</a>;

dictionary <dfn id="dfn-EcKeyImportParams">EcKeyImportParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// A named curve</span>
  <a href="#dfn-NamedCurve">NamedCurve</a> <dfn id="#dfn-EcKeyImportParams-namedCurve">namedCurve</dfn>;
};
            </x:codeblock>
          </div>

          <div id="ecdsa-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Sign</dt>
              <dd>
                When signing, the following algorithm should be used:
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"private"</code>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If any of the properties of <a href="#dfn-EcdsaParams">EcdsaParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate this algorithm with
                      an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>hashAlgorithm</var> be the <a href="#dfn-EcdsaParams-hash">hash</a>
                      property of
                      <var>normalizedAlgorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>hashAlgorithm</var> does not describe a
                      <a href="#algorithms">registered algorithm</a> that supports the digest
                      operation, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>M</var> be the result of performing the digest operation specified by
                      <var>hashAlgorithm</var> using <var>message</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>d</var> be the ECDSA private key associated with <var>key</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>params</var> be the EC domain parameters associated with
                      <var>key</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the ECDSA signing process, as specified in <a href="#X9.62">X9.62</a>,
                      Section 7.3, with <var>M</var> as the message, using <var>params</var> as the
                      EC domain parameters, and with <var>d</var> as the private key.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>r</var> and <var>s</var> be the pair of integers resulting from
                      performing the ECDSA signing process.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>result</var> be a new <code>ArrayBuffer</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Convert <var>r</var> to a bitstring and append the sequence of bytes to
                     <var>result</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Convert <var>s</var> to a bitstring and append the sequence of bytes to
                      <var>result</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>result</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Verify</dt>
              <dd>
                When verifying, the following algorithm should be used:
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"public"</code>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If any of the properties of <a href="#dfn-EcdsaParams">EcdsaParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate this algorithm with
                      an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>hashAlgorithm</var> be the <a href="#dfn-EcdsaParams-hash">hash</a>
                      property of
                      <var>normalizedAlgorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>hashAlgorithm</var> does not describe a
                      <a href="#algorithms">registered algorithm</a> that supports the digest
                      operation, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>M</var> be the result of performing the digest operation specified by
                      <var>hashAlgorithm</var> using <var>message</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>Q</var> be the ECDSA public key associated with <var>key</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>params</var> be the EC domain parameters associated with
                      <var>key</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the ECDSA verifying process, as specified in <a
                      href="#X9.62">X9.62</a>, Section 7.4, with <var>M</var> as the received
                      message, <var>signatire</var> as the received signature and using
                      <var>params</var> as the EC domain parameters, and 
                      <var>Q</var> as the public key.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>result</var> be a boolean indicating whether or not the purported
                      signature is valid, with <code>true</code> indicating the signature is valid
                      and <code>false</code> indicating it is invalid.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>result</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd></dd>
              <dt>Import Key</dt>
              <dd></dd>
              <dt>Export Key</dt>
              <dd></dd>
            </dl>
          </div>
          <div class="ednote">
            <p>
              TODO: Figure out what to do if "alg" is present on a JWK when importing, as "alg"
              also (potentially) indicates an inner hash algorithm (e.g. "ES256" indicates a
              namedCurve of "P-256", but also a hash of "SHA-256"). However, "alg" is optional,
              and all that is required when importing is a "kty" of "EC". This also requires
              thinking through the export/wrap case.
            </p>
          </div>
        </div>

        <div id="ecdh" class="section">
          <h3>ECDH</h3>
          <div id="ecdh-description" class="section">
            <h4>Description</h4>
            <p>
              This describes using Elliptic Curve Diffie-Hellman (ECDH) for key generation and key
              agreement, as specified by <a href="#X9.63">X9.63</a>.
            </p>
          </div>
          <div id="ecdh-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"ECDH"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-EcKeyGenParams">EcKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>deriveBits</td>
                  <td><a href="#dfn-EcdhKeyDeriveParams">EcdhKeyDeriveParams</a></td>
                  <td>Octet string</td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-EcKeyImportParams">EcKeyImportParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="dh-EcdhKeyDeriveParams" class="section">
            <h4>EcdhKeyDeriveParams dictionary</h4>
            <x:codeblock language="idl">
typedef Uint8Array <dfn id="dfn-ECPoint">ECPoint</dfn>;

dictionary <dfn id="dfn-EcdhKeyDeriveParams">EcdhKeyDeriveParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The peer's EC public key.</span>
  <a href="#dfn-Key">Key</a> public;
};
            </x:codeblock>
          </div>
          <div id="ecdh-operations" class="section">
            <h4>Operations</h4>
            <dt>Generate Key</dt>
            <dd>
              <ol>
                <li>
                  <p>
                    If any of the members of <a href="#dfn-EcKeyGenParams">EcKeyGenParams</a> are
                    not present in <var>normalizedAlgorithm</var>,
                    terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If <var>usages</var> contains a value which is not a case-sensitive string match
                    for one of <code>"deriveKey"</code> or <code>"deriveBits"</code>,
                    terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    Generate an Eliptic Curve key pair, as defined in [<a href="#X9.63">X9.63</a>]
                    with domain parameters for the curve identified by
                    the <a href="#dfn-ExKeyGenParams-namedCurve">namedCurve</a> property of
                    <var>normalizedAlgorithm</var>.
                    <dl class="switch">
                      <dt>If performing the operation results in an error:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                      <dt>Otherwise:</dt>
                      <dd>
                        <ol>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-EcKeyAlgorithm">EcKeyAlgorithm</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Algorithm-name">name</a> property of
                                <var>algorithm</var> to <code>"ECDH"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-EcKeyAlgorithm-namedCurve">namedCurve</a>
                                property of <var>algorithm</var> to equal the
                                <a href="#dfn-EcKeyGenParams">namedCurve</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the public key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                                to <code>"public"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>publicKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>publicKey</var> to true.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>publicKey</var> to be the empty list.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                                representing the private key of the generated key pair.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                                to <code>"private"</code>
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>privateKey</var> to be <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                <var>privateKey</var> to <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>privateKey</var> to be the
                                <a href="concept-usage-intersection">usage intersection</a> of
                                <var>usages</var> and <code>[ "deriveKey", "deriveBits" ]</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                                object.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                                of <var>result</var> to be <var>publicKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                                of <var>result</var> to be <var>privateKey</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>result</var>.
                              </p>
                            </li>
                          </ol>
                      </dd>
                    </dl>
                  </p>
                </li>
              </ol>
            </dd>
            <dt>Derive Bits</dt>
            <dd>
              <ol>
                <li>
                  <p>
                    If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                    is not a case-sensitive string match for <code>"private"</code>, terminate this
                    algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If any of the members of <a
                    href="#dfn-EcdhKeyDeriveParams">EcdhKeyDeriveParams</a> are not present in
                    <var>normalizedAlgorithm</var>, terminate this
                    algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    Let <var>publicKey</var> be the
                    <a href="#dfn-EcdhKeyDeriveParams-public">public</a> property of
                    <var>normalizedAlgorithm</var>.
                  </p>
                </li>
                <li>
                  <p>
                    If the <a href="#dfn-KeyAlgorithm-name">name</a> property of the
                    <a href="#dfn-Key-algorithm">algorithm</a> property of <var>publicKey</var> is
                    not a case-sensitive string match for
                    <code>"ECDH"</code>, terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                    is not a case-sensitive string match for
                    <code>"public"</code>, terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    If the <a href="#dfn-EcKeyAlgorithm-namedCurve">namedCurve</a> property of
                    the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>publicKey</var>
                    is not equal to the <a href="#dfn-EcKeyAlgorithm-namedCurve">namedCurve</a>
                    property of
                    the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>,
                    terminate this algorithm with an error.
                  </p>
                </li>
                <li>
                  <p>
                    Perform the ECDH primitive specified in <a href="#X9.63">X9.63</a> Section 5.4.1
                    with <var>key</var> as the EC private key <var>d</var> and the EC public key
                    represented by <var>publicKey</var> as the EC public key <var>Q</var>.
                    <dl class="switch">
                      <dt>If performing the operation results in an error:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                      <dt>Otherwise:</dt>
                      <dd>Let <var>secret</var> be the result of applying the field element to
                      octet string comversion defined in Section ? of <a href="#X9.63">X9.63</a>
                      to the output of the ECDH primitive.</dd>
                    </dl>
                  </p>
                </li>
                <li>
                  <p>
                    <dl class="switch">
                      <dt>If <var>length</var> is null:</dt>
                      <dd>Return <var>secret</var></dd>
                      <dt>Otherwise:</dt>
                      <dd>
                        <dl class="switch">
                          <dt>
                            If the length of <var>secret</var> in bits is less than
                            <var>length</var>:
                          </dt>
                          <dd>Terminate this algorithm with an error.</dd>
                          <dt>Otherwise:</dt>
                          <dd>Return the first <var>length</var> bits of <var>secret</var>.</dd>
                        </dl>
                      </dd>
                    </dl>
                  </p>
                </li>
              </ol>
            </dd>
            <dt>Import key</dt>
            <dd>
              <dl class="switch">
                <dt>If <var>format</var> is a case-sensitive string match for <code>"raw"</code>:</dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If any of the members of
                        <a href="#dfn-EcKeyImportParams">EcKeyImportParams</a> are not present in
                        <var>normalizedAlgorithm</var> then terminate this algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If the <a href="#dfn-EcKeyImportParams-namedCurve">namedCurve</a> property
                        of <var>normalizedAlgorithm</var> is not a case-sensitive string match for
                        a <a href="#dfn-NamedCurve">named curve</a>, terminate this algorithm with
                        an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If <var>usages</var> is not the empty list, terminate this algorithm with
                        an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        If <var>extractable</var> is false, terminate this algorithm with
                        an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>Q</var> be the elliptic curve point on the curve identified by the
                        <a href="#dfn-EcKeyImportParams-namedCurve">namedCurve</a> property
                        of <var>normalizedAlgorithm</var> identified by interpreting
                        <var>keyData</var> according to <a href="#X9.62">X9.62</a> Annex A.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>algorithm</var> be a new
                        <a href="#dfn-EcKeyAlgorithm">EcKeyAlgorithm</a> object.
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                        <var>algorithm</var> to <code>"ECDH"</code>.
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-KeyAlgorith-namedCurve">namedCurve</a> property of
                        <var>algorithm</var> to equal the
                        <a href="#dfn-EcKeyImportParams-namedCurve">namedCurve</a> property
                        of <var>normalizedAlgorithm</var>.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object.
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-Key-type">type</a> property of <var>key</var> to
                        <code>"public"</code>
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                        <var>key</var> to <var>algorithm</var>.
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-Key-usages">usages</a> property of
                        <var>key</var> to <var>usages</var>.
                      </p>
                    </li>
                    <li>
                      <p>
                        Set the <a href="#dfn-Key-extractable">extractable</a> property of
                        <var>key</var> to <var>extractable</var>.
                      </p>
                    </li>
                    <li>
                      <p>
                        Return <var>key</var>
                      </p>
                    </li>
                  </ol>
                </dd>
                <dt>Otherwise:</dt>
                <dd>Terminate this algorithm with an error.</dd>
              </dl>
            </dd>
            <dt>Export key</dt>
            <dd>
              <dl class="switch">
                <dt>
                  If <var>format</var> is a case-sensitive string match for <code>"raw"</code>:
                </dt>
                <dd>
                  <ol>
                    <li>
                      <p>
                        If the <a href="#dfn-Key-type">type</a> property of <var>key</var> is not
                        a case-sensitive string match for <code>"public"</code>, terminate this
                        algorithm with an error.
                      </p>
                    </li>
                    <li>
                      <p>
                        Let <var>data</var> be an octet string representing the Elliptic Curve point
                        <var>Q</var> represented by <var>key</var> according to
                        <a href="#X9.62">X9.62</a> Annex A.
                      </p>
                    </li>
                    <li>
                      <p>
                        Return a new <a href="#dfn-ArrayBuffer">ArrayBuffer</a> containing
                        <var>data</var>.
                      </p>
                    </li>
                  </ol>
                </dd>
                <dt>Otherwise:</dt>
                <dd>Terminate this algorithm with an error.</dd>
              </dl>
            </dd>
          </div>
        </div>

        <div id="aes-ctr" class="section">
          <h3>AES-CTR</h3>
          <div id="aes-ctr-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-CTR"</code> algorithm identifier is used to perform
              encryption and decryption using AES in Counter mode,
              as described in NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>].
            </p>
          </div>
          <div id="aes-ctr-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"AES-CTR"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>encrypt</td>
                  <td><a href="#dfn-AesCtrParams">AesCtrParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>decrypt</td>
                  <td><a href="#dfn-AesCtrParams">AesCtrParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>

          <div id="aes-ctr-params" class="section">
            <h4>AesCtrParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesCtrParams">AesCtrParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The initial value of the counter block. counter <span class="RFC2119">MUST</span> be 16 bytes
  // (the AES block size). The counter bits are the rightmost length
  // bits of the counter block. The rest of the counter block is for
  // the nonce. The counter bits are incremented using the standard
  // incrementing function specified in NIST SP 800-38A Appendix B.1:
  // the counter bits are interpreted as a big-endian integer and
  // incremented by one.</span>
  CryptoOperationData <dfn id="dfn-AesCtrParams-counter">counter</dfn>;
  <span class="comment">// The length, in bits, of the rightmost part of the counter block
  // that is incremented.</span>
  [EnforceRange] octet <dfn id="dfn-AesCtrParams-length">length</dfn>;
};
            </x:codeblock>
          </div>
          <div id="AesKeyAlgorithm-interface" class="section">
            <x:codeblock language="idl">
[NoInterfaceObject]
interface <dfn id="dfn-AesKeyAlgorithm">AesKeyAlgorithm</dfn> : <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  <span class="comment">// The length, in bits, of the key.</span>
  readonly attribute unsigned short <dfn id="dfn-AesKeyAlgorithm-length">length</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-keygen-params" class="section">
            <h4>AesKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesKeyGenParams">AesKeyGenParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The length, in bits, of the key.</span>
  [EnforceRange] unsigned short <dfn id="dfn-AesKeyGenParams-length">length</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-derivedkey-params" class="section">
            <h4>AesDerivedKeyParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesDerivedKeyParams">AesDerivedKeyParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The length, in bits, of the key.</span>
  [EnforceRange] unsigned short <dfn id="dfn-AesDerivedKeyParams-length">length</dfn>;
};
            </x:codeblock>
          </div>

          <div id="aes-ctr-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-ctr-params">AesCtrParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCtrParams-counter">counter</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCtrParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is zero or is greater
                      than 128, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>ciphertext</var> be the result of performing the CTR Encryption
                      operation described in Section 6.5 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCtrParams-counter">counter</a> property of
                      <var>normalizedAlgorithm</var> as the initial
                      value of the counter block,
                      the <a href="#dfn-AesCtrParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> as the input parameter
                      <var>m</var> to the standard counter block incrementing functon defined
                      in Appendix B.1 of NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] and
                      <var>plaintext</var> as the input plaintext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>ciphertext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-ctr-params">AesCtrParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCtrParams-counter">counter</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCtrParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is zero or is greater
                      than 128, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>plaintext</var> be the result of performing the CTR Decryption
                      operation described in Section 6.5 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCtrParams-counter">counter</a> property of
                      <var>normalizedAlgorithm</var> as the initial
                      value of the counter block,
                      the <a href="#dfn-AesCtrParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> as the input parameter
                      <var>m</var> to the standard counter block incrementing functon defined
                      in Appendix B.1 of NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] and
                      <var>ciphertext</var> as the input ciphertext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>plaintext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-CTR"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128CTR"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192CTR"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256CTR"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-CTR"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128CTR"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192CTR"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256CTR"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>keyData</var> be a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="aes-cbc" class="section">
          <h3>AES-CBC</h3>
          <div id="aes-cbc-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-CBC"</code> algorithm identifier is used to perform
              encryption and decryption using AES in Cipher Block Chaining mode,
              as described in NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>].
            </p>
            <p>
              When operating in CBC mode, messages that are not exact multiples
              of the AES block size (16 bytes) can be padded under a variety of
              padding schemes. In the Web Crypto API, the only padding mode that
              is supported is that of PKCS#7, as described by
              Section 10.3, step 2, of RFC 2315 [<a href="#RFC2315">RFC2315</a>].
            </p>
          </div>
          <div id="aes-cbc-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"AES-CBC"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>encrypt</td>
                  <td><a href="#dfn-AesCbcParams">AesCbcParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>decrypt</td>
                  <td><a href="#dfn-AesCbcParams">AesCbcParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="aes-cbc-params" class="section">
            <h4>AesCbcParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesCbcParams">AesCbcParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The initialization vector. <span class="RFC2119">MUST</span> be 16 bytes.</span>
  CryptoOperationData <dfn id="dfn-AesCbsParams-iv">iv</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-cbc-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-cbc-params">AesCbcParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCbcParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>padded-plaintext</var> be the result of adding padding octets to
                      <var>ciphertext</var> according to the procedure defined in Section 10.3
                      of RFC 2315 [<a href="#RFC2315">RFC2315</a>], step 2, with a value of
                      <var>k</var> of 16.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>ciphertext</var> be the result of performing the CBC Encryption
                      operation described in Section 6.2 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCbcParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter and
                      <var>padded-plaintext</var> as the input plaintext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>ciphertext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-cbc-params">AesCbcParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCbcParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>padded-plaintext</var> be the result of performing the CBC Decryption
                      operation described in Section 6.2 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCbcParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter and
                      <var>ciphertext</var> as the input ciphertext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>p</var> be the value of the last octet of <var>padded-plaintext</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>p</var> is zero or greater than 16, or if any of the last <var>p</var>
                      octets of <var>padded-plaintext</var> have a value which is not <var>p</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>plaintext</var> be the result of removing <var>p</var> octents from
                      the end of <var>padded-plaintext</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>plaintext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-CBC"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128CBC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192CBC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256CBC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or                           
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-CBC"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128CBC"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192CBC"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256CBC"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>keyData</var> be a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="aes-cmac" class="section">
          <h3>AES-CMAC</h3>
          <div id="aes-cmac-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-CMAC"</code> algorithm identifier is used to perform
              message authentication using AES with a cipher-based MAC, as
              described in NIST SP 800-38B [<a href="#SP800-38B">SP800-38B</a>].
            </p>
          </div>
          <div id="aes-cmac-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"AES-CMAC"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>sign</td>
                  <td><a href="#dfn-AesCmacParams">AesCmacParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>verify</td>
                  <td><a href="#dfn-AesCmacParams">AesCmacParams</a></td>
                  <td>boolean</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="aes-keygen-params" class="section">
            <h4>AesCmacParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesCmacParams">AesCmacParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The length, in bits, of the MAC.</span>
  [EnforceRange] unsigned short <dfn id="dfn-AesCmacParams-length">length</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-cmac-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Sign</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      Let <var>length</var> equal the <a href="#dfn-AesCmacParams-length">length</a>
                      property of <var>normalizedAlgorithm</var>, if present, and 128 otherwise.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>length</var> is zero or greater than 128, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>mac</var> be the result of performing the MAC Generation
                      operation described in Section 6.2 of
                      NIST SP 800-38B [<a href="#SP800-38B">SP800-38B</a>] using AES as the block
                      cipher, <var>length</var> as the value of the MAC length parameter,
                      <var>Tlen</var>, and <var>message</var> as the message, <var>M</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>mac</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Verify</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      Let <var>length</var> equal the <a href="#dfn-AesCmacParams-length">length</a>
                      property of <var>normalizedAlgorithm</var>, if present, and 128 otherwise.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>length</var> is zero or greater than 128, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>ouput</var> be the result of performing the MAC Verification
                      operation described in Section 6.3 of
                      NIST SP 800-38B [<a href="#SP800-38B">SP800-38B</a>] using AES as the block
                      cipher, <var>length</var> as the value of the MAC length parameter,
                      <var>Tlen</var>, <var>message</var> as the message, <var>M</var> and
                      <var>signature</var> as the received MAC, <var>T'</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return true if <var>output</var> is VALID and false otherwise.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-CMAC"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128CMAC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192CMAC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256CMAC"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-CMAC"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128CMAC"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192CMAC"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256CMAC"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="aes-gcm" class="section">
          <h3>AES-GCM</h3>
          <div id="aes-gcm-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-GCM"</code> algorithm identifier is used to perform
              authenticated encryption and decryption using AES in Galois/Counter Mode mode,
              as described in NIST SP 800-38D [<a href="#SP800-38D">SP800-38D</a>].
            </p>
          </div>
          <div id="aes-gcm-registration" class="section">
             <h4>Registration</h4>
             <p>
               The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
               this algorithm is <code>"AES-GCM"</code>.
             </p>
             <table>
               <thead>
                 <tr>
                   <th><a href="#supported-operations">Operation</a></th>
                   <th><a href="#algorithm-specific-params">Parameters</a></th>
                   <th><a href="#algorithm-result">Result</a></th>
                 </tr>
               </thead>
               <tbody>
                 <tr>
                   <td>encrypt</td>
                   <td><a href="#dfn-AesGcmParams">AesGcmParams</a></td>
                   <td>ArrayBuffer</td>
                 </tr>
                 <tr>
                   <td>decrypt</td>
                   <td><a href="#dfn-AesGcmParams">AesGcmParams</a></td>
                   <td>ArrayBuffer</td>
                 </tr>
                 <tr>
                   <td>generateKey</td>
                   <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                   <td><a href="#dfn-Key">Key</a></td>
                 </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
               </tbody>
             </table>
           </div>
          <div id="aes-gcm-params" class="section">
            <h4>AesGcmParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesGcmParams">AesGcmParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The initialization vector to use. May be up to 2^64-1 bytes long.</span>
  CryptoOperationData <dfn id="dfn-AesGcmParams-iv">iv</dfn>;
  <span class="comment">// The additional authentication data to include.</span>
  CryptoOperationData? <dfn id="dfn-AesGcmParams-additionalData">additionalData</dfn>;
  <span class="comment">// The desired length of the authentication tag. May be 0 - 128.</span>
  [EnforceRange] octet? <dfn id="dfn-AesGcmParams-tagLength">tagLength</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-gcm-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <a href="#aes-gcm-params">AesGcmParams</a> is not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>plaintext</var> has a length greater than 2^39 - 256
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> has a length greater than 2^64 - 1
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-additionalData">additionalData</a> property
                      of <var>normalizedAlgorithm</var> is present, is not null and has a length
                      greater than 2^64 - 1 bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If the <a href="#dfn-AesGcmParams-tagLength">tagLength</a> property of
                      <var>normalizedAlgorithm</var> is not present or is null:</dt>
                      <dd>Let <var>tagLength</var> be 128.</dd>
                      <dt>If the <a href="#dfn-AesGcmParams-tagLength">tagLength</a> property of
                      <var>normalizedAlgorithm</var> is one of 32, 64, 96, 104, 112, 120 or 128:</dt>
                      <dd>Let <var>tagLength</var> be equal to the
                      <a href="#dfn-AesGcmParams-tagLength">tagLength</a> property of
                       <var>normalizedAlgorithm</var></dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>additionalData</var> be the contents of the
                      <a href="#dfn-AesGcmParams-additionalData">additionalData</a> property
                      of <var>normalizedAlgorithm</var> if present and not null and the empty
                      octet string otherwise.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>C</var> and <var>T</var> be the outputs that result from performing
                      the Authenticated Encryption Function described in Section 7.1 of
                      NIST SP 800-38D [<a href="#SP800-38D">SP800-38D</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter,
                      <var>additionalData</var> as the <var>A</var> input parameter,
                      <var>tagLength</var> as the <var>t</var> pre-requisite and
                      <var>plaintext</var> as the input plaintext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>C</var> | <var>T</var>
                      where '|' denotes concatenation.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <a href="#aes-gcm-params">AesGcmParams</a> is not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If the <a href="#dfn-AesGcmParams-tagLangth">tagLength</a> property of
                      <var>normalizedAlgorithm</var> is not present or null:</dt>
                      <dd>Let <var>tagLength</var> be 128.</dd>
                      <dt>If the <a href="#dfn-AesGcmParams-tagLangth">tagLength</a> property of
                      <var>normalizedAlgorithm</var> is one of 32, 64, 96, 104, 112, 120 or 128:</dt>
                      <dd>Let <var>tagLength</var> be equal to the
                      <a href="#dfn-AesGcmParams-tagLangth">tagLength</a> property of
                       <var>normalizedAlgorithm</var></dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      If <var>plaintext</var> has a length less than <var>tagLength</var> bits,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> has a length greater than 2^64 - 1
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesGcmParams-additionalData">additionalData</a> property
                      of <var>normalizedAlgorithm</var> is present, is not null and has a length
                      greater than 2^64 - 1
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>tag</var> be the last <var>tagLength</var> bits of
                      <var>ciphertext</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>actualCiphertext</var> be the result of removing the last <var>tagLength</var> bits
                      from <var>ciphertext</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>additionalData</var> be the contents of the
                      <a href="#dfn-AesGcmParams-additionalData">additionalData</a> property
                      of <var>normalizedAlgorithm</var> if present and not null and the empty
                      octet string otherwise.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the Authenticated Decryption Function described in Section 7.2 of
                      NIST SP 800-38D [<a href="#SP800-38D">SP800-38D</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesGcmParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter,
                      <var>additionalData</var> as the <var>A</var> input parameter,
                      <var>tagLength</var> as the <var>t</var> pre-requisite,
                      <var>actualCiphertext</var> as the input ciphertext, <var>C</var> and
                      <var>tag</var> as the authentation tag, <var>T</var>.
                      <dl class="switch">
                        <dt>If the result of the algorithm is the indication of inauthenticity,
                        "<var>FAIL</var>":</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>Let <var>plaintext</var> be the output <var>P</var> of the Authenticated
                        Decryption Function.</dd>
                      </dl>
                    </p>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>plaintext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-GCM"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128GCM"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192GCM"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256GCM"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-GCM"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128GCM"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192GCM"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256GCM"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="aes-cfb" class="section">
          <h3>AES-CFB</h3>
          <div id="aes-cfb-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-CFB-8"</code> algorithm identifier is used to perform
              encryption and decryption using AES in Cipher Feedback mode, specifically CFB-8,
              as described in Section 6.3 of NIST SP 800-38A
              [<a href="#SP800-38A">SP800-38A</a>].
            </p>
          </div>
          <div id="aes-cfb-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"AES-CFB-8"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>encrypt</td>
                  <td><a href="#dfn-AesCfbParams">AesCfbParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>decrypt</td>
                  <td><a href="#dfn-AesCfbParams">AesCfbParams</a></td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="aes-cfb-params" class="section">
            <h4>AesCfbParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-AesCfbParams">AesCfbParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The initialization vector. <span class="RFC2119">MUST</span> be 16 bytes.</span>
  CryptoOperationData <dfn id="dfn-AesCfbParams-iv">iv</dfn>;
};
            </x:codeblock>
          </div>
          <div id="aes-cfb-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Encrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-cfb-params">AesCfbParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCfbParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>ciphertext</var> be the result of performing the CFB Encryption
                      operation described in Section 6.3 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCfbParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter, the
                      value 8 as the input parameter <var>s</var> and
                      <var>plaintext</var> as the input plaintext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>ciphertext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Decrypt</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-cfb-params">AesCfbParams</a> are not
                      present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesCfbParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> does not have length 16
                      bytes, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>plaintext</var> be the result of performing the CFB Decryption
                      operation described in Section 6.3 of
                      NIST SP 800-38A [<a href="#SP800-38A">SP800-38A</a>] using AES as the block
                      cipher, the contents of the <a href="#dfn-AesCfbParams-iv">iv</a> property of
                      <var>normalizedAlgorithm</var> as the <var>IV</var> input parameter, the
                      the value 8 as the input parameter <var>s</var> and
                      <var>ciphertext</var> as the input ciphertext.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>plaintext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-CFB-8"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for one of <code>"encrypt"</code>, <code>"decrypt"</code>,
                      <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate this algorithm
                      with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128CFB8"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192CFB8"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256CFB8"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-CFB-8"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128CFB8"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192CFB8"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256CFB8"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>keyData</var> be a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="aes-kw" class="section">
          <h3>AES-KW</h3>
          <div id="aes-kw-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"AES-KW"</code> algorithm identifier is used to perform
              key wrapping using AES, as
              described in [<a href="#rfc3394">RFC3394</a>].
            </p>
          </div>
          <div id="aes-kw-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"AES-KW"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>wrapKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>unwrapKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td>None</td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="aes-kw-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Wrap Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>plaintext</var> is not a multiple of 64 bits in length, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>ciphertext</var> be the result of performing the Key Wrap
                      operation described in Section 2.2.1 of [<a href="#rfc3394">RFC3394</a>]
                      with <var>plaintext</var> as the plaintext to be wrapped and using the default
                      Initial Value defined in Section 2.2.3.1 of the same document.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>ciphertext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Unwrap Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      Let <var>plaintext</var> be the result of performing the Key Unwrap
                      operation described in Section 2.2.2 of [<a href="#rfc3394">RFC3394</a>] with
                      <var>ciphertext</var> as the input ciphertext and using the default Initial
                      Value defined in Section 2.2.3.1 of the same document.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the Key Unwrap operation returns an error, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>plaintext</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#aes-keygen-params">AesKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var> is not equal to one of
                      128, 192 or 256, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for one of <code>"wrapKey"</code> or <code>"unwrapKey"</code>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an AES key of length
                      equal to the <a href="#dfn-AesKeyGenParams-length">length</a> property of
                      <var>normalizedAlgorithm</var>.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated AES key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"AES-KW"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-AesKeyAlgorithm-length">length</a> property of
                                <var>algorithm</var> to equal the
                                <a href="#dfn-AesKeyGenParams-length">length</a> property of
                                <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for one of <code>"wrapKey"</code> or <code>"unwrapKey"</code>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is not 128, 192 or 256
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>If <var>data</var> has length 128 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A128KW"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 192 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A192KW"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>If <var>data</var> has length 256 bits:</dt>
                            <dd>If the <code>"alg"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"A256KW"</code>, terminate
                            this algorithm with an error.</dd>
                            <dt>Otherwise:</dt>
                            <dd>Terminate this algorithm with an error.</dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"enc"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <a href="#dfn-key">Key</a>
                      object representing an AES key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-AesKeyAlgorithm">AesKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"AES-KW"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-AesKeyAlgorith-length">length</a> property of
                      <var>algorithm</var> to the length, in bits, of <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 128:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A128KW"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 192:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A192KW"</code>.</dd>
                              <dt>If the <a href="#dfn-AesKeyParams-length">length</a> property of
                              <var>key</var> is 256:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"A256KW"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of
                      <a href="#dfn-AesDerivedKeyParams">AesDerivedKeyParams</a> are not present in
                      <var>normalizedDerivedKeyAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var> is not 128, 192 or 256, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return the <a href="#dfn-AesDerivedKeyParams-length">length</a> property of
                      <var>normalizedDerivedKeyAlgorithm</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>

        <div id="hmac" class="section">
          <h3>HMAC</h3>
          <div id="hmac-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>HMAC</code> algorithm calculates and verifies hash-based message
              authentication codes according to [<a href="#fips-pub-198-1">FIPS PUB 198-1</a>].
            </p>
          </div>
          <div id="hmac-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"HMAC"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>sign</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>verify</td>
                  <td>None</td>
                  <td>boolean</td>
                </tr>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-HmacKeyGenParams">HmacKeyGenParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-HmacImportParams">HmacImportParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
                <tr>
                  <td>get key length</td>
                  <td><a href="#dfn-HmacDerivedKeyParams">HmacDerivedKeyParams</a></td>
                  <td>Integer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="hmac-importparams" class="section">
            <h4>HmacImportParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-HmacImportParams">HmacImportParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The inner hash function to use.</span>
  AlgorithmIdentifier hash;
};
            </x:codeblock>
          </div>
          <div id="hmac-keyalgorithm" class="section">
            <h4>HmacKeyAlgorithm interface</h4>
            <x:codeblock language="idl">
interface <dfn id="dfn-HmacKeyAlgorithm">HmacKeyAlgorithm</dfn> : <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  <span class="comment">// The inner hash function to use.</span>
  readonly attribute KeyAlgorithm hash;
};
            </x:codeblock>
          </div>
          <div id="hmac-keygen-params" class="section">
            <h4>HmacKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-HmacKeyGenParams">HmacKeyGenParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The inner hash function to use.</span>
  AlgorithmIdentifier hash;
  <span class="comment">// The length (in bytes) of the key to generate. If unspecified, the
  // recommended length will be used, which is the size of the associated hash function's block
  // size.</span>
  [EnforceRange] unsigned long length;
};
            </x:codeblock>
          </div>
          <div id="hmac-derivedkey-params" class="section">
            <h4>HmacDerivedKeyParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-HmacKeyGenParams">HmacDerivedKeyParams</dfn> : <a href="#dfn-HmacImportParams">HmacImportParams</a> {
  <span class="comment">// The length (in bytes) of the key to generate. If unspecified, the
  // recommended length will be used, which is the size of the associated hash function's block
  // size.</span>
  [EnforceRange] unsigned long length;
};
            </x:codeblock>
          </div>
          <div id="hmac-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Sign</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      Let <var>mac</var> be the result of performing the MAC Generation
                      operation described in Section 4 of
                      [<a href="#fips-pub-198-1">FIPS PUB 198-1</a>] using the key represented by <var>key</var>,
                      the hash function identified by the
                      <a href="#dfn-HmacKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> and
                      <var>message</var> as the input data <var>text</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>mac</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Verify</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      Let <var>mac</var> be the result of performing the MAC Generation
                      operation described in Section 4 of
                      [<a href="#fips-pub-198-1">FIPS PUB 198-1</a>] using the key represented by <var>key</var>,
                      the hash function identified by the
                      <a href="#dfn-HmacKeyAlgorithm-hash">hash</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var> and
                      <var>message</var> as the input data <var>text</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return true if <var>mac</var> is equal to <var>signature</var> and false
                      otherwise.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-HmacKeyGenParams-hash">hash</a> property is
                      not present in <var>normalizedAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>
                        If the <a href="#dfn-HmacKeyGenParams-length">length</a> property of
                        <var>normalizedAlgorithm</var> is not present:
                      </dt>
                      <dd>
                        Let <var>length</var> be the block size in bytes of the hash function
                        identified by the <a href="#dfn-HmacKeyGenParams-hash">hash</a> property
                        of <var>normalizedAlgorithm</var>.
                      </dd>
                      <dt>
                        Otherwise, if the <a href="#dfn-HmacKeyGenParams-length">length</a>
                        property of <var>normalizedAlgorithm</var> is non-zero:
                      </dt>
                      <dd>
                        Let <var>length</var> be equal to the
                        <a href="#dfn-HmacKeyGenParams-length">length</a>
                        property of <var>normalizedAlgorithm</var>.
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains any entry which is not a case-sensitive string
                      match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate an key of length <var>length</var> bytes.
                      <dl class="switch">
                        <dt>If the key generation step fails:</dt>
                        <dd>Terminate this algorithm with an error</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                            <li>
                              <p>
                                Let <var>key</var> be a new
                                <a href="#dfn-key">Key</a> object representing the
                                generated key.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>algorithm</var> be a new
                                <a href="#dfn-HmacKeyAlgorithm">HmacKeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                                <var>algorithm</var> to <code>"HMAC"</code>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Let <var>hash</var> be a new
                                <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                <var>hash</var> to equal the <a href="#dfn-Algorithm-name">name</a>
                                property of the <a href="#dfn-HmacKeyGenParams-hash">hash</a>
                                property of <var>normalizedAlgorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-HmacKeyAlgorithm-hash">hash</a> property
                                of <var>algorithm</var> to <var>hash</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                <var>key</var> to <var>algorithm</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-extractable">extractable</a> property
                                of <var>key</var> to be <var>extractable</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Set the <a href="#dfn-Key-usages">usages</a> property of
                                <var>key</var> to be <var>usages</var>.
                              </p>
                            </li>
                            <li>
                              <p>
                                Return <var>key</var>.
                              </p>
                            </li>
                          </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If <var>usages</var> contains an entry which is not a case-sensitive string
                      match for <code>"sign"</code> or <code>"verify"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>hash</var> be a new <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>data</var> be the octet string contained in <var>keyData</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              If the length in bits of <var>data</var> is zero
                              then terminate this algorithm with an error.
                            </p>
                          </li>
                          <li>
                            <dl class="switch">
                              <dt>
                                If the <a href="#dfn-HmacImportParams-hash">hash</a> property of
                                <var>normalizedAlgorithm</var> is present and has a
                                <a href="#dfn-Algorithm-name">name</a> property:
                              </dt>
                              <dd>
                                Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                <var>hash</var> to equal the <a href="#dfn-Algorithm-name">name</a>
                                property of the <a href="#dfn-HmacImportParams-hash">hash</a>
                                property of <var>normalizedAlgorithm</var>.
                              </dd>
                              <dt>Otherwise:</dt>
                              <dd>Terminate this algorithm with an error.</dd>
                            </dl>
                          </li>
                        </ol>
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <li>
                          <p>
                            Let <var>jwk</var> be the result of running the
                            <a href="#concept-parse-a-jwk">parse a jwk</a>
                            algorithm over <var>keyData</var>.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"kty"</code> field of <var>jwk</var> is not a
                            case-sensitive string match to <code>"oct"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If <var>jwk</var> does not meet the requirements of
                            Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>, terminate this
                            algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let <var>data</var> be the octet string obtained by decoding the
                            <code>"k"</code> field of <var>jwk</var>.
                          </p>
                        </li>
                        <li>
                          <dl class="switch">
                            <dt>
                              If the <a href="#dfn-HmacImportParams-hash">hash</a> property of
                              <var>normalizedAlgorithm</var> is present and has a
                                <a href="#dfn-Algorithm-name">name</a> property:
                            </dt>
                            <dd>
                              <ol>
                                <li>
                                  <p>
                                    Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                    <var>hash</var> to equal the <a href="#dfn-Algorithm-name">name</a>
                                    property of the <a href="#dfn-HmacImportParams-hash">hash</a>
                                    property of <var>normalizedAlgorithm</var>.
                                  </p>
                                </li>
                                <li>
                                  <dl class="switch">
                                    <dt>
                                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> is a case-sensitive string match for
                                      <code>"SHA-1"</code>:
                                    </dt>
                                    <dd>
                                      If the <code>"alg"</code> field of <var>jwk</var> is present
                                      and is not a case-sensitive string match to <code>"HS1"</code>,
                                      terminate this algorithm with an error.
                                    </dd>
                                    <dt>
                                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> is a case-sensitive string match for
                                      <code>"SHA-224"</code>:
                                    </dt>
                                    <dd>
                                      If the <code>"alg"</code> field of <var>jwk</var> is present
                                      and is not a case-sensitive string match to <code>"HS224"</code>,
                                      terminate this algorithm with an error.
                                    </dd>
                                    <dt>
                                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> is a case-sensitive string match for
                                      <code>"SHA-256"</code>:
                                    </dt>
                                    <dd>
                                      If the <code>"alg"</code> field of <var>jwk</var> is present
                                      and is not a case-sensitive string match to <code>"HS256"</code>,
                                      terminate this algorithm with an error.
                                    </dd>
                                    <dt>
                                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> is a case-sensitive string match for
                                      <code>"SHA-384"</code>:
                                    </dt>
                                    <dd>
                                      If the <code>"alg"</code> field of <var>jwk</var> is present
                                      and is not a case-sensitive string match to <code>"HS384"</code>,
                                      terminate this algorithm with an error.
                                    </dd>
                                    <dt>
                                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> is a case-sensitive string match for
                                      <code>"SHA-512"</code>:
                                    </dt>
                                    <dd>
                                      If the <code>"alg"</code> field of <var>jwk</var> is present
                                      and is not a case-sensitive string match to <code>"HS512"</code>,
                                      terminate this algorithm with an error.
                                    </dd>
                                    <dt>Otherwise:</dt>
                                    <dd>Terminate this algorithm with an error.</dd>
                                  </dl>
                                </li>
                              </ol>
                            </dd>
                            <dt>Otherwise:</dt>
                            <dd>
                              <ol>
                                <li>
                                  <p>
                                    If the <code>alg</code> field of <var>jwk</var> is not present,
                                    terminate this algorithm with an error.
                                  </p>
                                </li>
                                <li>
                                  <dl class="switch">
                                    <dt>
                                      If the <code>"alg"</code> field of <var>jwk</var> is a
                                      case-sensitive string match to <code>"HS1"</code>:
                                    </dt>
                                    <dd>
                                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> to <code>"SHA-1"</code>.
                                    </dd>
                                    <dt>
                                      If the <code>"alg"</code> field of <var>jwk</var> is a
                                      case-sensitive string match to <code>"HS224"</code>:
                                    </dt>
                                    <dd>
                                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> to <code>"SHA-224"</code>.
                                    </dd>
                                    <dt>
                                      If the <code>"alg"</code> field of <var>jwk</var> is a
                                      case-sensitive string match to <code>"HS256"</code>:
                                    </dt>
                                    <dd>
                                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> to <code>"SHA-256"</code>.
                                    </dd>
                                    <dt>
                                      If the <code>"alg"</code> field of <var>jwk</var> is a
                                      case-sensitive string match to <code>"HS384"</code>:
                                    </dt>
                                    <dd>
                                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> to <code>"SHA-384"</code>.
                                    </dd>
                                    <dt>
                                      If the <code>"alg"</code> field of <var>jwk</var> is a
                                      case-sensitive string match to <code>"HS512"</code>:
                                    </dt>
                                    <dd>
                                      Set the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                                      <var>hash</var> to <code>"SHA-512"</code>.
                                    </dd>
                                    <dt>Otherwise:</dt>
                                    <dd>Terminate this algorthm with an error.</dd>
                                  </dl>
                                </li>
                              </ol>
                            </dd>
                          </dl>
                        </li>
                        <li>
                          <p>
                            If the <code>"use"</code> field of <var>jwk</var> is present, and is
                            not a case-sensitive string match to <code>"sign"</code>, terminate
                            this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"key_ops"</code> field of <var>jwk</var> is present, and
                            is invalid according to the requirements of
                            <a href="#jwk">JSON Web Key</a> or
                            does not contain all of the specified <var>usages</var> values,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                        <li>
                          <p>
                            If the <code>"ext"</code> field of <var>jwk</var> is present and
                            has the value false and <var>extractable</var> is true,
                            terminate this algorithm with an error.
                          </p>
                        </li>
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Let <var>key</var> be a new <code><a href="#dfn-key">Key</a></code>
                      object representing an HMAC key with value <var>data</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>algorithm</var> be a new
                      <a href="#dfn-HmacKeyAlgorithm">HmacKeyAlgorithm</a>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-KeyAlgorith-name">name</a> property of
                      <var>algorithm</var> to <code>"HMAC"</code>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-HmacKeyAlgorithm-hash">hash</a> property of
                      <var>algorithm</var> to <var>hash</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>
                      to <var>algorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-extractable">extractable</a> property of
                      <var>key</var> to <var>extractable</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Set the <a href="#dfn-Key-usages">usages</a> property of <var>key</var>
                      to the <a href="#concept-normalized-usages">normalized value</a> of
                      <var>usages</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>key</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>If <var>format</var> is <code>"raw"</code>:</dt>
                      <dd>
                        Let <var>data</var> be the raw octets of the key represented by
                        <var>key</var>.
                      </dd>
                      <dt>If <var>format</var> is <code>"jwk"</code>:</dt>
                      <dd>
                        <ol>
                          <li>
                            <p>
                              Let <var>jwk</var> be a new internal object.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>kty</code> property of <var>jwk</var> to the
                              string <code>"oct"</code>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>k</code> property of <var>jwk</var> to be a string
                              containng the raw octets
                              of the key represented by <var>key</var>, encoded according to
                              Section 6.4 of <a href="#jwa">JSON Web Algorithms</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>algorithm</var> be the
                              <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>hash</var> be the
                              <a href="#dfn-HmacKeyAlgorithm-hash">hash</a> property of
                              <var>algorithm</var>.
                            </p>
                          </li>
                          
                          <li>
                            <dl class="switch">
                              <dt>If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>hash</var> is <code>"SHA-1"</code>:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"HS1"</code>.</dd>
                              <dt>If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>hash</var> is <code>"SHA-224"</code>:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"HS224"</code>.</dd>
                              <dt>If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>hash</var> is <code>"SHA-256"</code>:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"HS256"</code>.</dd>
                              <dt>If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>hash</var> is <code>"SHA-384"</code>:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"HS384"</code>.</dd>
                              <dt>If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                              <var>hash</var> is <code>"SHA-512"</code>:</dt>
                              <dd>Set the <code>alg</code> property of <var>jwk</var> to
                              the string <code>"HS512"</code>.</dd>
                            </dl>
                          </li>
                          <li>
                            <p>
                              Set the <code>key_ops</code> property of <var>jwk</var> to equal the
                              <a href="#dfn-Key-usages">usages</a> property of <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Set the <code>ext</code> property of <var>jwk</var> to equal the 
                              <a href="#dfn-Key-extractable">extractable</a> property of
                              <var>key</var>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>stringifiedJwk</var> be the result of encoding <var>jwk</var>
                              into a string according to the grammer specified in Section 15.12 of
                              <a href="#ECMA-262">ECMA262</a>.
                            </p>
                          </li>
                          <li>
                            <p>
                              Let <var>data</var> be the UTF-8 encoding of
                              <var>stringifiedJwk</var>.
                            </p>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>data</var>.
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Get key length</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-HmacImportParams-hash">hash</a> property is
                      not present in <var>normalizedDerivedKeyAlgorithm</var>, terminate
                      this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <dl class="switch">
                      <dt>
                        If the <a href="#dfn-HmacDerivedKeyParams-length">length</a> property of
                        <var>normalizedDerivedKeyAlgorithm</var> is not present:
                      </dt>
                      <dd>
                        Let <var>length</var> be the block size in bytes of the hash function
                        identified by the <a href="#dfn-HmacImportParams-hash">hash</a> property
                        of <var>normalizedDerivedKeyAlgorithm</var>.
                      </dd>
                      <dt>
                        Otherwise, if the <a href="#dfn-HmacDerivedKeyParams-length">length</a>
                        property of <var>normalizedDerivedKeyAlgorithm</var> is non-zero:
                      </dt>
                      <dd>
                        Let <var>length</var> be equal to the
                        <a href="#dfn-HmacDerivedKeyParams-length">length</a>
                        property of <var>normalizedDerivedKeyAlgorithm</var>.
                      </dd>
                      <dt>Otherwise:</dt>
                      <dd>Terminate this algorithm with an error.</dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return <var>length</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>
        <div id="dh" class="section">
          <h3>Diffie-Hellman</h3>
          <div id="dh-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              This describes using Diffie-Hellman for key generation and key agreement, as specified
              by <a href="#PKCS3">PKCS #3</a>.
            </p>
          </div>
          <div id="dh-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"DH"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>generateKey</td>
                  <td><a href="#dfn-DhKeyGenParams">DhKeyGenParams</a></td>
                  <td><a href="#dfn-KeyPair">KeyPair</a></td>
                </tr>
                <tr>
                  <td>deriveBits</td>
                  <td><a href="#dfn-DhKeyDeriveParams">DhKeyDeriveParams</a></td>
                  <td>Octet string</td>
                </tr>
                <tr>
                  <td>importKey</td>
                  <td><a href="#dfn-DhImportKeyParams">DhImportKeyParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>exportKey</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="dh-DhKeyGenParams" class="section">
            <h4>DhKeyGenParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-DhKeyGenParams">DhKeyGenParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The prime p.</span>
  BigInteger <dfn id="dfn-DhKeyGenParams-prime">prime</dfn>;
  <span class="comment">// The base g.</span>
  BigInteger <dfn id="dfn-DhKeyGenParams-generator">generator</dfn>;
};
            </x:codeblock>
          </div>
          <div id="dh-DhKeyAlgorithm" class="section">
            <h4>DhKeyAlgorithm interface</h4>
            <x:codeblock language="idl">
[NoInterfaceObject]
interface <dfn id="dfn-DhKeyAlgorithm">DhKeyAlgorithm</dfn> : <a href="#dfn-KeyAlgorithm">KeyAlgorithm</a> {
  <span class="comment">// The prime p.</span>
  readonly attribute BigInteger <dfn id="dfn-DhKeyAlgorithm-prime">prime</dfn>;
  <span class="comment">// The base g.</span>
  readonly attribute BigInteger <dfn id="dfn-DhKeyAlgorithm-generator">generator</dfn>;
};
            </x:codeblock>
          </div>
          <div id="dh-DhKeyDeriveParams" class="section">
            <h4>DhKeyDeriveParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-DhKeyDeriveParams">DhKeyDeriveParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The peer's public value.</span>
  <a href="#dfn-Key">Key</a> <dfn id="dfn-DhKeyDeriveParams-public">public</dfn>;
};
            </x:codeblock>
          </div>
          <div id="dh-DhImportKeyParams" class="section">
            <h4>DhImportKeyParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-DhImportKeyParams">DhImportKeyParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The prime p.</span>
  BigInteger <dfn id="dfn-DhImportKeyParams-prime">prime</dfn>;
  <span class="comment">// The base g.</span>
  BigInteger <dfn id="dfn-DhImportKeyParams-generator">generator</dfn>;
};
            </x:codeblock>
          </div>
          <div id="dh-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Generate Key</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the members of <a href="#dfn-DhKeyGenParams">DhKeyGenParams</a> are
                      not present in <var>normalizedAlgorithm</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If <var>usages</var> contains a value which is not a case-sensitive string match
                      for one of <code>"deriveKey"</code> or <code>"deriveBits"</code>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Generate a Diffie-Hellman key pair, as defined in Section 7 of
                      [<a href="#PKCS3">PKCS #3</a>], with prime, <var>p</var>, and base,
                      <var>g</var>, as specified in the
                      <a href="#dfn-DhKeyGenParams-prime">prime</a> and
                      <a href="#dfn-DhKeyGenParams-generator">generator</a> properties of
                      <var>normalizedAlgorithm</var>, respectively.
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          <ol>
                              <li>
                                <p>
                                  Let <var>algorithm</var> be a new
                                  <a href="#dfn-DhKeyAlgorithm">DhKeyAlgorithm</a>
                                  object.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Algorithm-name">name</a> property of
                                  <var>algorithm</var> to <code>"DH"</code>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-DhKeyAlgorithm-prime">prime</a>
                                  property of <var>algorithm</var> to equal the
                                  <a href="#dfn-DhKeyGenParams-prime">prime</a> property of
                                  <var>normalizedAlgorithm</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-DhKeyAlgorithm-generator">generator</a>
                                  property of <var>algorithm</var> to equal the
                                  <a href="#dfn-DhKeyGenParams-generator">generator</a> property of
                                  <var>normalizedAlgorithm</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Let <var>publicKey</var> be a new <a href="#dfn-Key">Key</a> object
                                  representing the public key of the generated key pair.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                                  to <code>"public"</code>
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                  <var>publicKey</var> to be <var>algorithm</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                  <var>publicKey</var> to true.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-usages">usages</a> property of
                                  <var>publicKey</var> to be the empty list.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Let <var>privateKey</var> be a new <a href="#dfn-Key">Key</a> object
                                  representing the private key of the generated key pair.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-Type">type</a> property of <var>privateKey</var>
                                  to <code>"private"</code>
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                                  <var>privateKey</var> to be <var>algorithm</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-extractable">extractable</a> property of
                                  <var>privateKey</var> to <var>extractable</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#dfn-Key-usages">usages</a> property of
                                  <var>privateKey</var> to be <var>usages</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Let <var>result</var> be a new <a href="#dfn-KeyPair">KeyPair</a>
                                  object.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#def-KeyPair-publicKey">publicKey</a> property
                                  of <var>result</var> to be <var>publicKey</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Set the <a href="#def-KeyPair-privateKey">privateKey</a> property
                                  of <var>result</var> to be <var>privateKey</var>.
                                </p>
                              </li>
                              <li>
                                <p>
                                  Return <var>result</var>.
                                </p>
                              </li>
                            </ol>
                        </dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Derive Bits</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>key</var>
                      is not a case-sensitive string match for <code>"private"</code>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If any of the members of <a
                      href="#dfn-DhKeyDeriveParams">DhKeyDeriveParams</a> are not present in
                      <var>normalizedAlgorithm</var>, terminate this
                      algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>publicKey</var> be the
                      <a href="#dfn-DhKeyDeriveParams-public">public</a> property of
                      <var>normalizedAlgorithm</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-KeyAlgorithm-name">name</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>publicKey</var> is
                      not a case-sensitive string match for
                      <code>"DH"</code>, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-Key-type">type</a> property of <var>publicKey</var>
                      is not a case-sensitive string match for
                      <code>"public"</code>, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>publicKey</var>
                      is not equal to the <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>publicKey</var>
                      is not equal to the <a href="#dfn-DhKeyAlgorithm-generator">generator</a>
                      property of the
                      <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>,
                      terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Perform the Diffie Hellman Phase II algorithm as specified in
                      Section 8 of [<a href="#PKCS3">PKCS #3</a>]
                      with <var>key</var> as the DH private value <var>x</var> and the
                      Diffie Hellman public value represented by the
                      <a href="#dfn-DhKeyDeriveParams-public">public</a> property of
                      <var>normalizedAlgorithm</var> as the other's public value <var>PV'</var>.
                      <dl class="switch">
                        <dt>If performing the operation results in an error:</dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>
                          Let <var>secret</var> be the output of the DH Phase II, <var>SK</var>.
                        </dd>
                      </dl>
                    </p>
                  </li>
                  <li>
                    <p>
                      <dl class="switch">
                        <dt>
                          If the length of <var>secret</var> in bits is less than
                          <var>length</var>:
                        </dt>
                        <dd>Terminate this algorithm with an error.</dd>
                        <dt>Otherwise:</dt>
                        <dd>Return the first <var>length</var> bits of <var>secret</var>.</dd>
                      </dl>
                    </p>
                  </li>
                </ol>
              </dd>
              <dt>Import Key</dt>
              <dd>
                <dl class="switch">
                  <dt>
                    If <var>format</var> is a case-sensistive string match for <code>"raw"</code>:
                  </dt>
                  <dd>
                    <div class="ednote">
                      <p>
                        Raw import of private values is presently not supported.
                      </p>
                    </div>
                    <ol>
                      <li>
                        <p>
                          If any of the members of
                          <a href="#dfn-DhImportKeyParams">DhImportKeyParams</a> are
                          not present in <var>normalizedAlgorithm</var>,
                          terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          If <var>usages</var> is not an empty array,
                          terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          If <var>extractable</var> is false, terminate this algorithm with an
                          error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>PV</var> be the integer which results from interpreting the octets
                          of <var>keyData</var> as an unsigned big integer with most significant
                          octet first.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object representing
                          a Diffie-Hellman public key with public value <var>PV</var> and with
                          prime, <var>p</var> and base, <var>g</var> equal to the
                          <a href="#dfn-DhImportKeyParams-prime">prime</a> and
                          <a href="#dfn-DhImportKeyParams-generator">generator</a> properties
                          of <var>normalizedAlgorithm</var> respectively.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-type">type</a> propety of <var>key</var> to
                          <code>"public"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>algorithm</var> be a new
                          <a href="#dfn-DhKeyAlgorithm">DhKeyAlgorithm</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Algorithm-name">name</a> property of
                          <var>algorithm</var> to <code>"DH"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of
                          <var>algorithm</var> to equal the
                          <a href="#dfn-DhKeyImportParams-prime">prime</a> property of
                          <var>normalizedAlgorithm</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of
                          <var>algorithm</var> to equal the
                          <a href="#dfn-DhKeyImportParams-generator">generator</a> property of
                          <var>normalizedAlgorithm</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                          <var>key</var> to <var>algorithm</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-extractable">extractable</a> property of
                          <var>key</var> to <var>extractable</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-usages">usages</a> property of
                          <var>key</var> to <var>usages</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Return <var>key</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>
                    If <var>format</var> is a case-sensistive string match for <code>"spki"</code>:
                  </dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          If <var>usages</var> is non-empty, terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>spki</var> be the result of running the
                          <a href="#concept-parse-a-spki">parse a subjectPublicKeyInfo</a> algorithm
                          over <var>keyData</var>.
                          <ul>
                            <li>
                              <p>
                                If an error occured while parsing, terminate this algorithm with an error.
                              </p>
                            </li>
                          </ul>
                        </p>
                      </li>
                      <li>
                        <p>
                          If the <code>algorithm</code> object identifier field of the
                          <code>algorithm</code> AlgorithmIdentifier field of <var>spki</var> is not
                          equivalent to the <code>dhKeyAgreement</code> OID defined in Section 9
                          of [<a href="#PKCS3">PKCS #3</a>], terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>parameters</var> be the result of performing the
                          <a href="#concept-parse-an-asn1-structure">parse an ASN.1 structure</a>
                          algorithm, with the <code>parameters</code> field of the
                          <code>algorithm</code> AlgorithmIdentifier field of <var>spki</var> as
                          <var>data</var> and the <code>DHParameter</code> structure defined in
                          Section 9 of [<a href="#PKCS3">PKCS #3</a>] as <var>structure</var> and
                          with <var>extactData</var> set to true.
                          <ul>
                            <li>
                              <p>
                                If an error occured while parsing, terminate this algorithm with an error.
                              </p>
                            </li>
                          </ul>
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>publicValue</var> be the integer obtained by interpreting the
                          <code>subjectPublicKey</code> field of <var>spki</var> as an unsigned
                          integer, most significant bit first.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object representing
                          a Diffie Hellman public key with prime, <var>p</var> and base,
                          <var>g</var> as specified by the <code>prime</code> and <code>base</code>
                          fields of <var>parameters</var> respectively and with public value,
                          <var>y</var> equal to <var>publicValue</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-type">type</a> propety of <var>key</var> to
                          <code>"public"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>algorithm</var> be a new
                          <a href="#dfn-DhKeyAlgorithm">DhKeyAlgorithm</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Algorithm-name">name</a> property of
                          <var>algorithm</var> to <code>"DH"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of
                          <var>algorithm</var> to equal the
                          <code>prime</code> field of <var>parameters</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of
                          <var>algorithm</var> to equal the
                          <code>base</code> field of
                          <var>parameters</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                          <var>key</var> to <var>algorithm</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-extractable">extractable</a> property of
                          <var>key</var> to <var>extractable</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-usages">usages</a> property of
                          <var>key</var> to the
                          <a href="#concept-normalized-usages">normalized value</a> of
                          <var>usages</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Return <var>key</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>
                  If <var>format</var> is a case-sensistive string match for <code>"pkcs8"</code>:
                  </dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          If <var>usages</var> contains a value which is not a case-sensitive string
                          match for one of <code>"deriveKey"</code> or <code>"deriveBits"</code>,
                          terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>privateKeyInfo</var> be the result of running the
                          <a href="#concept-parse-a-privateKeyInfo">parse a privateKeyInfo</a>
                          algorithm over <var>keyData</var>.
                          <ul>
                            <li>
                              <p>
                                If an error occured while parsing, terminate this algorithm with an error.
                              </p>
                            </li>
                          </ul>
                        </p>
                      </li>
                      <li>
                        <p>
                          If the <code>algorithm</code> object identifier field of the
                          <code>algorithm</code> AlgorithmIdentifier field of
                          <var>privateKeyInfo</var> is not
                          equivalent to the <code>dhKeyAgreement</code> OID defined in Section 9
                          of [<a href="#PKCS3">PKCS #3</a>], terminate this algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>parameters</var> be the result of performing the
                          <a href="#concept-parse-an-asn1-structure">parse an ASN.1 structure</a>
                          algorithm, with the <code>parameters</code> field of the
                          <code>algorithm</code> AlgorithmIdentifier field of
                          <var>privateKeyInfo</var> as
                          <var>data</var> and the <code>DHParameter</code> structure defined in
                          Section 9 of [<a href="#PKCS3">PKCS #3</a>] as <var>structure</var> and
                          with <var>extactData</var> set to true.
                          <ul>
                            <li>
                              <p>
                                If an error occured while parsing, terminate this algorithm with an error.
                              </p>
                            </li>
                          </ul>
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>privateValue</var> be the integer obtained by interpreting the
                          <code>privateKey</code> field of <var>privateKeyInfo</var> as an unsigned
                          integer, most significant octet first.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>key</var> be a new <a href="#dfn-Key">Key</a> object representing
                          a Diffie Hellman private key with prime, <var>p</var> and base,
                          <var>g</var> as specified by the <code>prime</code> and <code>base</code>
                          fields of <var>parameters</var> respectively and with private value,
                          <var>x</var> equal to <var>privateValue</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-type">type</a> propety of <var>key</var> to
                          <code>"private"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>algorithm</var> be a new
                          <a href="#dfn-DhKeyAlgorithm">DhKeyAlgorithm</a>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Algorithm-name">name</a> property of
                          <var>algorithm</var> to <code>"DH"</code>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of
                          <var>algorithm</var> to equal the
                          <code>prime</code> field of <var>parameters</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of
                          <var>algorithm</var> to equal the
                          <code>base</code> field of
                          <var>parameters</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-algorithm">algorithm</a> property of
                          <var>key</var> to <var>algorithm</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-extractable">extractable</a> property of
                          <var>key</var> to <var>extractable</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Set the <a href="#dfn-Key-usages">usages</a> property of
                          <var>key</var> to the
                          <a href="#concept-normalized-usages">normalized value</a> of
                          <var>usages</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Return <var>key</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>Terminate this algorithm with an error.</dd>
                </dl>
              </dd>
              <dt>Export Key</dt>
              <dd>
                <dl class="switch">
                  <dt>
                    If <var>format</var> is a case-sensitive string match for <code>"raw"</code>:
                  </dt>
                  <dd>
                    <ol>
                      <li>
                        <dl class="switch">
                          <dt>
                            If the <a href="#dfn-Key-type">type</a> property of <var>key</var> is a
                            case-sensitive string match for <code>"public"</code>:
                          </dt>
                          <dd>
                            Let <var>result</var> be the Public Value, <var>PV</var>, associated
                            with <var>key</var> as
                            specified in Section 7 of [<a href="#PKCS3">PKCS #3</a>].
                          </dd>
                          <dt>
                            If the <a href="#dfn-Key-type">type</a> property of <var>key</var> is a
                            case-sensitive string match for <code>"private"</code>:
                          </dt>
                          <dd>
                            Let <var>result</var> be the octet string that represents the private
                            value <var>x</var> associated with <var>key</var> as a big integer,
                            most significant octet first.
                          </dd>
                        </dl>
                      </li>
                      <li>
                        <p>
                          Return a new ArrayBuffer containing <var>result</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>
                    If <var>format</var> is a case-sensitive string match for <code>"spki"</code>:
                  </dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          If the <a href="#dfn-Key-type">type</a> property of <var>key</var> is not a
                          case-sensitive string match for <code>"public"</code> then terminate this
                          algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>parameters</var> be a new internal object.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let the <code>prime</code> property of <var>parameters</var> equal the
                          <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of the
                          <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let the <code>base</code> property of <var>parameters</var> equal the
                          <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of the
                          <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>result</var> be the result of performing the
                          <a href="#concept-encode-a-subjectPublicKeyInfo">encode a
                          subjectPublicKeyInfo</a> algorithm with the Public Value , <var>PV</var>,
                          associated
                            with <var>key</var> as
                            specified in Section 7 of [<a href="#PKCS3">PKCS #3</a>] as
                            <var>publicKey</var>, <var>parameters</var> as
                          <var>parameters</var>, the <code>DHParameter</code> structure defined in
                          Section 9 of [<a href="#PKCS3">PKCS #3</a>] as <var>parametersType</var>
                          and the <code>dhKeyAgreement</code> OID defined in Section 9
                          of [<a href="#PKCS3">PKCS #3</a>] as <var>oid</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Return <var>result</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>
                    If <var>format</var> is a case-sensitive string match for <code>"pkcs8"</code>:
                  </dt>
                  <dd>
                    <ol>
                      <li>
                        <p>
                          If the <a href="#dfn-Key-type">type</a> property of <var>key</var> is not a
                          case-sensitive string match for <code>"private"</code> then terminate this
                          algorithm with an error.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>parameters</var> be a new internal object.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let the <code>prime</code> property of <var>parameters</var> equal the
                          <a href="#dfn-DhKeyAlgorithm-prime">prime</a> property of the
                          <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let the <code>base</code> property of <var>parameters</var> equal the
                          <a href="#dfn-DhKeyAlgorithm-generator">generator</a> property of the
                          <a href="#dfn-Key-algorithm">algorithm</a> property of <var>key</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Let <var>result</var> be the result of performing the
                          <a href="#concept-encode-a-privateKeyInfo">encode a
                          privateKeyInfo</a> algorithm with the octet string that represents the
                          private value, <var>x</var> associated with <var>key</var> as a big
                          integer, most significant octet first as <var>privateKey</var>,
                          <var>parameters</var> as
                          <var>parameters</var>, the <code>DHParameter</code> structure defined in
                          Section 9 of [<a href="#PKCS3">PKCS #3</a>] as <var>parametersType</var>
                          and the <code>dhKeyAgreement</code> OID defined in Section 9
                          of [<a href="#PKCS3">PKCS #3</a>] as <var>oid</var>.
                        </p>
                      </li>
                      <li>
                        <p>
                          Return <var>result</var>.
                        </p>
                      </li>
                    </ol>
                  </dd>
                  <dt>Otherwise:</dt>
                  <dd>Terminate this algorithm with an error.</dd>                  
                </dl>
              </dd>
            </dl>
          </div>
          <div class="ednote">
            <p>
              Since this algorithm is based on PKCS#3, import/export in X9.42 form, as
              specified in X.509/RFC 3279 is not supported [PKCS#3 uses only prime/p and base/g
              as parameters, wheras X9.42 adds a further value q].
            </p>
          </div>
        </div>
        <div id="sha" class="section">
          <h3>SHA</h3>
          <div id="sha-description" class="section">
            <h4>Description</h4>
            <p>
              This describes the SHA-1 and SHA-2 families, as specified by
              [<a href="#FIPS180-4">FIPS PUB 180-4</a>].
            </p>
          </div>
          <div id="sha-registration" class="section">
            <h4>Registration</h4>
            <p>
              The following algorithms are added as <a href="#recognized-algorithm-name">
              recognized algorithm names</a>:
            </p>
            <dl>
              <dt id="alg-sha-1"><code>"SHA-1"</code></dt>
              <dd>The SHA-1 algorithm as specified in Section 6.1</dd>
              <dt id="alg-sha-224"><code>"SHA-224"</code></dt>
              <dd>The SHA-224 algorithm as specified in Section 6.3</dd>
              <dt id="alg-sha-256"><code>"SHA-256"</code></dt>
              <dd>The SHA-256 algorithm as specified in Section 6.2</dd>
              <dt id="alg-sha-384"><code>"SHA-384"</code></dt>
              <dd>The SHA-384 algorithm as specified in Section 6.5</dd>
              <dt id="alg-sha-512"><code>"SHA-512"</code></dt>
              <dd>The SHA-512 algorithm as specified in Section 6.4</dd>
            </dl>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>digest</td>
                  <td>None</td>
                  <td>ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="sha-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Digest</dt>
              <dd>
                <ol>
                  <li>
                    <dl class="switch">
                      <dt>
                        If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                        <var>normalizedAlgorithm</var> is a cases-sensitve string match for
                        <code>"SHA-1"</code>:
                      </dt>
                      <dd>
                        Let <var>result</var> be the result of performing the SHA-1 hash function
                        defined in Section 6.1 of [<a href="#FIPS180-4">FIPS PUB 180-4</a>] using
                        <var>message</var> as the input message, <var>M</var>.
                      </dd>
                      <dt>
                        If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                        <var>normalizedAlgorithm</var> is a cases-sensitve string match for
                        <code>"SHA-224"</code>:
                      </dt>
                      <dd>
                        Let <var>result</var> be the result of performing the SHA-224 hash function
                        defined in Section 6.3 of [<a href="#FIPS180-4">FIPS PUB 180-4</a>] using
                        <var>message</var> as the input message, <var>M</var>.
                      </dd>
                      <dt>
                        If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                        <var>normalizedAlgorithm</var> is a cases-sensitve string match for
                        <code>"SHA-256"</code>:
                      </dt>
                      <dd>
                        Let <var>result</var> be the result of performing the SHA-256 hash function
                        defined in Section 6.2 of [<a href="#FIPS180-4">FIPS PUB 180-4</a>] using
                        <var>message</var> as the input message, <var>M</var>.
                      </dd>
                      <dt>
                        If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                        <var>normalizedAlgorithm</var> is a cases-sensitve string match for
                        <code>"SHA-384"</code>:
                      </dt>
                      <dd>
                        Let <var>result</var> be the result of performing the SHA-384 hash function
                        defined in Section 6.5 of [<a href="#FIPS180-4">FIPS PUB 180-4</a>] using
                        <var>message</var> as the input message, <var>M</var>.
                      </dd>
                      <dt>
                        If the <a href="#dfn-KeyAlgorithm-name">name</a> property of
                        <var>normalizedAlgorithm</var> is a cases-sensitve string match for
                        <code>"SHA-512"</code>:
                      </dt>
                      <dd>
                        Let <var>result</var> be the result of performing the SHA-1 hash function
                        defined in Section 6.4 of [<a href="#FIPS180-4">FIPS PUB 180-4</a>] using
                        <var>message</var> as the input message, <var>M</var>.
                      </dd>
                    </dl>
                  </li>
                  <li>
                    <p>
                      Return a new ArrayBuffer containing <var>result</var>.
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>
        <div id="concatkdf" class="section">
          <h3>Concat KDF</h3>
          <div id="concatkdf-description" class="section">
            <h4>Description</h4>
            <p>
              The <code>"CONCAT"</code> algorithm identifier is used to perform key derivation
              using the key derivation algorithm defined in Section 5.8.1 of NIST SP 800-56A
              [<a href="#SP800-56A">SP800-56A</a>].
            </p>
          </div>
          <div id="concatkdf-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"CONCAT"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>deriveBits</td>
                  <td><a href="#dfn-ConcatParams">ConcatParams</a></td>
                  <td>Octet string</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="concat-params" class="section">
            <h4>ConcatParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-ConcatParams">ConcatParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The digest method to use to derive the keying material.</span>
  AlgorithmIdentifier <dfn id="dfn-ConcatParams-hash">hash</dfn>;

  <span class="comment">// A bit string corresponding to the AlgorithmId field of the OtherInfo parameter.</span>
  <span class="comment">// The AlgorithmId indicates how the derived keying material will be parsed and for which</span>
  <span class="comment">// algorithm(s) the derived secret keying material will be used.</span>
  CryptoOperationData <dfn id="dfn-ConcatParams-algorithmId">algorithmId</dfn>;
  <span class="comment">// A bit string that corresponds to the PartyUInfo field of the OtherInfo parameter.</span>
  CryptoOperationData <dfn id="dfn-ConcatParams-partyUInfo">partyUInfo</dfn>;
  <span class="comment">// A bit string that corresponds to the PartyVInfo field of the OtherInfo parameter.</span>
  CryptoOperationData <dfn id="dfn-ConcatParams-partyVInfo">partyVInfo</dfn>;
  <span class="comment">// An optional bit string that corresponds to the SuppPubInfo field of the OtherInfo parameter.</span>
  CryptoOperationData? <dfn id="dfn-ConcatParams-publicInfo">publicInfo</dfn>;
  <span class="comment">// An optional bit string that corresponds to the SuppPrivInfo field of the OtherInfo parameter.</span>
  CryptoOperationData? <dfn id="dfn-ConcatParams-privateInfo">privateInfo</dfn>;
};
            </x:codeblock>
          </div>
          <div id="concat-operations" class="section">
            <h4>Operations</h4>
            <dl>
              <dt>Derive Bits</dt>
              <dd>
                <ol>
                  <li>
                    <p>
                      If any of the
                      <a href="#dfn-ConcatParams-hash">hash</a>,
                      <a href="#dfn-ConcatParams-algorithmId">algorithmId</a>,
                      <a href="#dfn-ConcatParams-partyUInfo">partyUInfo</a> or
                      <a href="#dfn-ConcatParams-partyVInfo">partyVInfo</a> properties are not
                      present in <var>normalizedAlgorithm</var>, terminate this algorithm with an
                      error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Let <var>secret</var> be the result of performing the Concatenation Key
                      Derivation Funtion defined in Section 5.8.1 of
                      [<a href="#SP800-56A">SP800-56A</a>] with <var>length</var> as
                      <var>keydatalen</var>, the hash function identified by the
                      <a href="#dfn-ConcatParams-hash">hash</a> property of
                      <var>normalizedAlgorithm</var> as <var>H</var>, the
                      <a href="#dfn-ConcatParams-algorithmId">algorithmId</a> property of
                      <var>normalizedAlgorithm</var> as <var>AlgorithmID</var>, the
                      <a href="#dfn-ConcatParams-partyUInfo">partyUInfo</a> property of
                      <var>normalizedAlgorithm</var> as <var>PartyUInfo</var>, the
                      <a href="#dfn-ConcatParams-partyVInfo">partyVInfo</a> property of
                      <var>normalizedAlgorithm</var> as <var>PartyVInfo</var>, the
                      <a href="#dfn-ConcatParams-pubicInfo">publicInfo</a> property of
                      <var>normalizedAlgorithm</var>, if present and not null, as
                      <var>publicInfo</var> and the
                      <a href="#dfn-ConcatParams-privateInfo">privateInfo</a> property of
                      <var>normalizedAlgorithm</var>, if present and not null, as
                      <var>privateInfo</var>.
                    </p>
                  </li>
                  <li>
                    <p>
                      If the operation fails, terminate this algorithm with an error.
                    </p>
                  </li>
                  <li>
                    <p>
                      Return <var>secret</var>
                    </p>
                  </li>
                </ol>
              </dd>
            </dl>
          </div>
        </div>
        <div id="hkdf-ctr" class="section">
          <h3>HKDF-CTR</h3>
          <div id="hkdf-ctr-description" class="section">
            <h4>Description</h4>
            <p class="norm">This section is non-normative.</p>
            <p>
              The <code>"HKDF-CTR"</code> algorithm identifier is used to
              perform key derivation using the algorithm described in
              RFC 5869 [<a href="#RFC5869">RFC5869</a>] and NIST SP 800-56C
              [<a href="#SP800-56C">SP800-56C</a>], using HMAC in counter mode,
              as described in Section 5.1 of NIST SP 800-108
              [<a href="#SP800-108">SP800-108</a>].
            </p>
          </div>
          <div id="hkdf-ctr-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a>
              for this algorithm is <code>"HKDF-CTR"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>deriveKey</td>
                  <td><a href="#dfn-HkdfCtrParams">HkdfCtrParams</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>deriveBits</td>
                  <td><a href="#dfn-HkdfCtrParams">HkdfCtrParams</a></td>
                  <td><a href="#dfn-ArrayBuffer">ArrayBuffer</a></td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="hkdf-ctr-params" class="section">
            <h4>HkdfCtrParams dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-HkdfCtrParams">HkdfCtrParams</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  <span class="comment">// The algorithm to use with HMAC (eg: <a href="#sha-256">SHA-256</a>)</span>
  AlgorithmIdentifier hash;
  <span class="comment">// A bit string that corresponds to the label that identifies the purpose for the derived keying material.</span>
  CryptoOperationData label;
  <span class="comment">// A bit string that corresponds to the context of the key derivation, as described in Section 5 of NIST SP 800-108 [<a href="#SP800-108">SP800-108</a>]</span>
  CryptoOperationData context;
};
            </x:codeblock>
            <div class="ednote">
              <p>
                The definition of HKDF allows the caller to supply an optional pseudorandom salt
                value, which is used as the key during the extract phase. If this value is not
                supplied, an all zero string is used instead. However, support for an explicit
                salt value is not widely implemented in existing APIs, nor is it required by
                existing usages of HKDF. Should this be an optional parameter, and if so, what
                should the behaviour be of a user agent that does not support explicit salt
                values (is it conforming or non-conforming?)
              </p>
            </div>
          </div>
          <div id="hkdf2-ctr-operations" class="section">
            <h4>Operations</h4>
            <ul>
              <li>Derive Key</li>
              <li>Derive Bits</li>
            </ul>
          </div>
        </div>

        <div id="pbkdf2" class="section">
          <h3>PBKDF2</h3>
          <div id="pbkdf2-description" class="section">
            <h4>Description</h4>
          </div>
          <div id="pbkdf2-registration" class="section">
            <h4>Registration</h4>
            <p>
              The <a href="#recognized-algorithm-name">recognized algorithm name</a> for
              this algorithm is <code>"PBKDF2"</code>.
            </p>
            <table>
              <thead>
                <tr>
                  <th><a href="#supported-operations">Operation</a></th>
                  <th><a href="#algorithm-specific-params">Parameters</a></th>
                  <th><a href="#algorithm-result">Result</a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>deriveKey</td>
                  <td><a href="#dfn-Pbkdf2Params">Pbkdf2Params</a></td>
                  <td><a href="#dfn-Key">Key</a></td>
                </tr>
                <tr>
                  <td>deriveBits</td>
                  <td><a href="#dfn-Pbkdf2Params">Pbkdf2Params</a></td>
                  <td><a href="#dfn-ArrayBuffer">ArrayBuffer</a></td>
                </tr>
              </tbody>
            </table>
          </div>
          <div id="pbkdf2-params" class="section">
            <h4>Pbkdf2Params dictionary</h4>
            <x:codeblock language="idl">
dictionary <dfn id="dfn-Pbkdf2Params">Pbkdf2Params</dfn> : <a href="#dfn-Algorithm">Algorithm</a> {
  CryptoOperationData salt;
  [EnforceRange] unsigned long iterations;
  AlgorithmIdentifier prf;
  CryptoOperationData? password;
};
            </x:codeblock>
            <div class="ednote">
              <p>
                In the above snippet, <code>password</code> is an optional field. The intent is
                that conforming user agents <span class="RFC2119">MAY</span> support applications
                that wish to use PBKDF2 by providing password entry via an un-spoofable (by the
                web application) UI.
              </p>
            </div>
          </div>
          <div id="pbkdf2-operations" class="section">
            <h4>Operations</h4>
            <ul>
              <li>Derive Key</li>
              <li>Derive Bits</li>
            </ul>
          </div>
        </div>
      </div>
 
      <div id="algorithm-normalizing-rules" class="section">
        <h2>Algorithm normalizing rules</h2>
        <p>
          The <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> typedef
          permits algorithms to be specified as either a <code>dictionary</code> or a DOMString. In
          order to ensure consistency, conforming user agents must normalize all AlgorithmIdentifier
          inputs into a single, canonical form. When normalization is indicated, it must act as
          follows:
        </p>
        <ol>
          <li>
            Let <var>O</var> be the
            <a href="#dfn-AlgorithmIdentifier"><code>AlgorithmIdentifier</code></a> to be
            normalized.
          </li>
          <li>
            Let <var>result</var> be the normalized output.
          </li>
          <li>If <var>O</var> is a DOMString, then:
            <ol>
              <li>
                If <var>O</var> contains any non-ASCII characters, throw a <code>SyntaxError</code>
                and return from this algorithm.
              </li>
              <li>
                Convert every character in <var>O</var> to lower case.
              </li>
              <li>
                If <var>O</var> contains a recognized <a href="#dfn-algorithm-alias">algorithm
                alias</a> then let <var>result</var> be re-initialized to the aliased dictionary and
                this algorithm restarted, using <var>result</var> as the input to be normalized.
              </li>
              <li>
                Otherwise, terminate this algorithm with an error.
              </li>
            </ol>
          </li>
          <li>For each key <var>K</var> in <var>O</var> with an associated value <var>V</var>:
            <ul>
              <li>
                If the associated value <var>V</var> is an AlgorithmIdentifier, set
                the associated value for <var>K</var> in <var>result</var> to be the result
                of executing the algorithm normalization rules.
              </li>
              <li>
                If the associated value <var>V</var> is a dictionary, set the associated
                value for <var>K</var> in <var>result</var> to be the result of executing
                this algorithm recursively for every value in the dictionary.
              </li>
              <li>
                Otherwise, let the associated value for key <var>K</var> in <var>result</var>
                be the associated value for key <var>K</var> in <var>O</var>.
              </li>
            </ul>
          </li>
          <li>
            Return <var>result</var>.
          </li>
        </ol>
        <div class="ednote">
          <p>
            WARNING: This section is broken for purpose. Further, normalization at this degree is
            is no longer required, as the algorithm is never reflected back to the caller. Instead,
            specify how specific algorithms can/should validate the parameters - and how to perform
            DOMString substitutions.
          </p>
        </div>
      </div>
      <div id="examples-section" class="section">
        <h2>JavaScript Example Code</h2>
        <div id="examples-signing" class="section">
          <h3>Generate a signing key pair, sign some data</h3>
        
        <x:codeblock language="es">
<span class="comment">// Algorithm Object</span>
var algorithmKeyGen = {
  name: "RSASSA-PKCS1-v1_5",
  <span class="comment">// <a href="#dfn-RsaHashedKeyGenParams">RsaHashedKeyGenParams</a></span>
  modulusLength: 2048,
  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),  <span class="comment">// Equivalent to 65537</span>
  hash: {
    name: "SHA-256",
  }
};

var algorithmSign = {
  name: "RSASSA-PKCS1-v1_5"
};

window.crypto.subtle.generateKey(algorithmKeyGen, false, ["sign"]).then(
  function(key) {
    var dataPart1 = convertPlainTextToArrayBufferView("hello,");
    var dataPart2 = convertPlainTextToArrayBufferView(" world!");
    <span class="comment">// TODO: create example utility function that converts text -> ArrayBufferView</span>

    return window.crypto.subtle.sign(algorithmSign, key.privateKey, [dataPart1, dataPar2]);
  },
  console.error.bind(console, "Unable to generate a key")
).then(
  console.log.bind(console, "The signature is: "),
  console.error.bind(console, "Unable to sign")
);
        </x:codeblock>
        </div>
        <div id="examples-symmetric-encryption" class="section">
          <h3>Symmetric Encryption</h3>
        <x:codeblock language="es">
var clearDataArrayBufferView = convertPlainTextToArrayBufferView("Plain Text Data");
<span class="comment">// TODO: create example utility function that converts text -> ArrayBufferView</span>

var aesAlgorithmKeyGen = {
  name: "AES-CBC",
  <span class="comment">// <a href="#dfn-AesKeyGenParams">AesKeyGenParams</a></span>
  length: 128
};

var aesAlgorithmEncrypt = {
  name: "AES-CBC",
  <span class="comment">// <a href="#dfn-AesCbcParams">AesCbcParams</a></span>
  iv: window.crypto.getRandomValues(new Uint8Array(16))
};

<span class="comment">// Create a keygenerator to produce a one-time-use AES key to encrypt some data</span>
window.crypto.subtle.generateKey(aesAlgorithmKeyGen, false, ["encrypt"]).then(
  function(aesKey) {
    return window.crypto.subtle.encrypt(aesAlgorithmEncrypt, aesKey, [ clearDataArrayBufferView ]);
  }
).then(console.log.bind(console, "The ciphertext is: "),
       console.error.bind(console, "Unable to encrypt"));
        </x:codeblock>
      </div>
    </div>
    <div id="iana-section" class="section">
    <h2>IANA Considerations</h2>
        <div id="iana-section-jws-jwa" class="section">
          <h3>JSON Web Signature and Encryption Algorithms Registration</h3>
          <p>
            This section registers the following algorithm identifiers in the IANA JSON Web
            Signature and Encryption Algorithms Registry for use with JSON Web Key. Note that the
            'Implementation Requirements' field in the template refers to use with JSON Web
            Signature and JSON Web Encryption specifically, in which case use of unauthenticated
            encryption is prohibited.
          </p>
          <ul>
            <li>Algorithm Name: "A128CBC"</li>
            <li>Algorithm Description: AES CBC using 128 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A192CBC"</li>
            <li>Algorithm Description: AES CBC using 192 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>            
          <ul>
            <li>Algorithm Name: "A256CBC"</li>
            <li>Algorithm Description: AES CBC using 256 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>            
          <ul>
            <li>Algorithm Name: "A128CTR"</li>
            <li>Algorithm Description: AES CTR using 128 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>            
          <ul>
            <li>Algorithm Name: "A192CTR"</li>
            <li>Algorithm Description: AES CTR using 192 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A256CTR"</li>
            <li>Algorithm Description: AES CTR using 256 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A128CMAC"</li>
            <li>Algorithm Description: AES CMAC using 128 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>          
          <ul>
            <li>Algorithm Name: "A192CMAC"</li>
            <li>Algorithm Description: AES CMAC using 192 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A256CMAC"</li>
            <li>Algorithm Description: AES CMAC using 256 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A128CFB8"</li>
            <li>Algorithm Description: AES CFB-8 using 128 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A192CFB8"</li>
            <li>Algorithm Description: AES CFB-8 using 192 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "A256CFB8"</li>
            <li>Algorithm Description: AES CFB-8 using 256 bit key</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "HS1"</li>
            <li>Algorithm Description: HMAC using SHA-1</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
          <ul>
            <li>Algorithm Name: "HS224"</li>
            <li>Algorithm Description: HMAC using SHA-224</li>
            <li>Algorithm Usage Location(s): "JWK"</li>
            <li>JOSE Implementation Requirements: Prohibited</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document ]]</li>
          </ul>
        </div>
        <div id="iana-section-jwk" class="section">
          <h3>JSON Web Key Parameters Registry</h3>
          <ul>
            <li>Parameter Name: "ext"</li>
            <li>Used with "kty" Value(s): *</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: W3C Web Cryptography Working Group</li>
            <li>Specification Document(s): [[ This Document]]</li>
          </ul>
        </div>
      </div>
      <div id="acknowledgements-section" class="section">
        <h2>Acknowledgements</h2>
        <p>
          The editors would like to thank Adam Barth, Alex Russell, Ali Asad, Arun Ranganathan,
          Brian Smith, Brian Warner, Channy Yun, Eric Roman, Glenn Adams, Jim Schaad, Kai Engert,
          Mark Watson, Michael Hutchinson, Michael Jones, Nick Van den Bleeken, Richard Barnes,
          Vijay Bharadwaj, Virginie Galindo, and Wan-Teh Chang for their technical feedback and
          assistance.
        </p>
        <p>
          Thanks to the W3C Web Cryptography WG, and to participants on the public-webcrypto@w3.org
          mailing list.
        </p>
        <p>
         The W3C would like to thank the <a
         href="http://www.northropgrumman.com/cybersecurity/presskit_research_co.html">Northrop
         Grumman Cybersecurity Research Consortium</a> for supporting W3C/MIT.
        </p>
        <p>
          The <a href="#dfn-RandomSource-method-getRandomValues"><code>getRandomValues</code></a>
          method in the <code>Crypto</code> interface was originally proposed by Adam Barth to the
          <a href="http://wiki.whatwg.org/wiki/Crypto">WHATWG</a>.
        </p>
      </div>
      <div id='references' class='section'>
         <h2>References</h2>
         <div id="normative-references" class="section">
           <h3>Normative References</h3>
           <dl>
             <dt id="DOM4">DOM4</dt>
             <dd>
               <cite><a href="http://dom.spec.whatwg.org/">DOM (Living Standard)</a></cite>,
               A. Gregor, A. van Kesteren, Ms2ger. WHATWG.
               <div class="ednote">This will be updated to W3C DOM4 once Promises are incorporated.</div>
             </dd>
             <dt id="ECMA-262">ECMAScript</dt>
             <dd>
               <cite><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">
               ECMAScript 5th Edition</a></cite>, A. Wirfs-Brock, P. Lakshman et al.
             </dd>
             <dt id="FIPS180-4">FIPS 180-4</dt>
             <dd>
               <cite><a href="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
               FIPS PUB 180-4: Secure Hash Standard</a></cite>, NIST.
             </dd>
             <dt id="HTML">HTML</dt>
             <dd>
               <cite><a href="http://dev.w3.org/html5/spec/Overview.html">HTML5: A vocabulary and
               associated APIs for HTML and XHTML (work in progress)</a></cite>, I. Hickson. W3C.
             </dd>
             <dt id="PKCS3">PKCS3</dt>
             <dd>
               <cite><a href="http://www.rsa.com/rsalabs/node.asp?id=2126">PKCS #3: Diffie-Hellman
               Key-Agreement Standard</a></cite>, RSA Laboratories.
             </dd>
             <dt id="RFC2119">RFC2119</dt>
             <dd>
               <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to
               Indicate Requirement Levels</a></cite>, S. Bradner. IETF.
             </dd>
             <dt id="RFC3447">RFC3447</dt>
             <dd>
               <cite><a href="http://www.ietf.org/rfc/rfc3447">Public-Key Cryptography Standards
               (PKCS) #1: RSA Cryptography Specifications Version 2.1</a></cite>, J. Jonsson,
               B. Kaliski. IETF.
             </dd>
             <dt id="RFC5208">RFC5208</dt>
             <dd>
              <cite><a href="http://www.ietf.org/rfc/rfc5208">Public-Key Cryptography Standards
              (PKCS) #8: Private-Key Information Syntax Specification Version 1.2</a></cite>,
              B. Kaliski. IETF.
             </dd>
             <dt id="RFC5280">RFC5280</dt>
             <dd>
              <cite><a href="http://www.ietf.org/rfc/rfc5280">Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List (CRL) Profile</a></cite>,
              D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, W. Polk. IETF.
             </dd>
             <dt id="TypedArrays">Typed Arrays</dt>
             <dd>
               <cite><a href="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/doc/spec/TypedArray-spec.html">
               Typed Arrays (work in progress)</a></cite>, V. Vukicevic, K. Russell. Khronos Group.
             </dd>
             <dt id="WebIDL">WebIDL Specification</dt>
             <dd>
               <cite><a href="http://www.w3.org/TR/WebIDL/">WebIDL (work in progress)</a></cite>,
               C. McCormack.
             </dd>
             <dt id="X9.62">X9.62</dt>
             <dd>
               <cite>ANS X9.62–2005: Public Key Cryptography for the Financial Services Industry,
               The Elliptic Curve Digital Signature Algorithm (ECDSA)</cite>, ANSI.
             </dd>
             <dt id="X9.63">X9.63</dt>
             <dd>
               <cite>ANS X9.63–2001: Public Key Cryptography for the Financial Services Industry,
               Key Agreement and Key Transport Using Elliptic Curve Cryptography</cite>, ANSI.
             </dd>
             <dt id="jwk">JSON Web Key</dt>
             <dd>
                <cite><a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-key">JSON Web Key (work in progress)</a></cite>, M. Jones, Microsoft.
             </dd>
             <dt id="rfc3394">RFC3394</dt>
             <dd>
                <cite><a href="http://www.ietf.org/rfc/rfc3394.txt">Advanced Encryption Standard (AES) Key Wrap Algorithm</a></cite>, J. Schaad, R. Housley, IETF.
             </dd>
             <dt id="fips-pub-198-1">FIPS PUB 198-1</dt>
             <dd>
              <cite>
                <a href="http://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf">
                  The Keyed-Hash Message Authentication Code (HMAC)
                </a>
              </cite>,
              July 2008, NIST.
             </dd>
           </dl>
        </div>
        <div id="informative-references" class="section">
          <h3>Informative References</h3>
          <dl>
            <dt id="CDSA">CDSA</dt>
            <dd>
              <cite><a href="http://www.opengroup.org/security/cdsa.htm">Common Security: CDSA and
              CSSM, Version 2 (with corrigenda)</a></cite>, the Open Group.
            </dd>
            <dt id="CNG">CNG</dt>
            <dd>
              <cite><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa376210(v=vs.85).aspx">
              Cryptography API: Next Generation</a></cite>, Microsoft Corporation.
            </dd>
            <dt id="CryptoAPI">CryptoAPI</dt>
            <dd>
              <cite><a href="http://msdn.microsoft.com/en-us/library/aa380256.aspx">Cryptography
              Reference</a></cite>, Microsoft Corporation.
            </dd>
            <dt id="draft-TLS-OBC">DRAFT-TLS-OBC</dt>
            <dd>
              <cite><a href="http://tools.ietf.org/html/draft-balfanz-tls-obc-01">TLS Origin-Bound
              Certificates</a></cite>, D. Balfanz, D. Smetters, M. Upadhyay, A. Barth. IETF.
            </dd>
            <dt id="FileAPI">FileAPI</dt>
            <dd>
              <cite><a href="http://www.w3.org/TR/FileAPI/">File API</a></cite>,
              A. Ranganathan, J. Sicking. W3C.
            </dd>
            <dt id="PKCS11">PKCS11</dt>
            <dd>
              <cite><a href="http://www.rsa.com/rsalabs/node.asp?id=2133">PKCS #11: Cryptographic
              Token Interface Standard</a></cite>, RSA Laboratories.
            </dd>
            <dt id="RFC2315">RFC 2315</dt>
            <dd>
              <cite><a href="http://tools.ietf.org/html/rfc2315">PKCS #7: Cryptographic
              Message Syntax, Version 1.5</a></cite>, B. Kaliski. RSA Laboratories.
            </dd>
            <dt id="RFC2898">RFC 2898</dt>
            <dd>
              <cite><a href="http://tools.ietf.org/html/rfc2898">PKCS #5: Password-Based
              Cryptography Specification, Version 2.0</a></cite>, B. Kaliski. RSA Laboratories
            </dd>
            <dt id="RFC5705">RFC 5705</dt>
            <dd>
              <cite><a href="http://tools.ietf.org/html/rfc5705">Keying Material Exporters for
              Transport Layer Security (TLS)</a></cite>, E. Rescorla. IETF.
            </dd>
            <dt id="RFC5869">RFC 5869</dt>
            <dd>
              <cite><a href="https://tools.ietf.org/html/rfc5869">HMAC-based Extract-and-Expand
              Key Derivation Function (HKDF)</a></cite>, H. Krawczyk, P. Eronen. IETF.
            </dd>
            <dt id="SP800-38A">NIST SP 800-38A</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf">
              NIST Special Publication 800-38A: Recommendation for Block Cipher
              Modes of Operation, Methods and Techniques</a></cite>, December 2001, NIST.
            </dd>
            <dt id="SP800-38B">NIST SP 800-38B</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf">
              NIST Special Publication 800-38B: Recommendation for Block Cipher Modes of Operation:
              The CMAC Mode for Authentication</a></cite>, May 2005, NIST.
            </dd>
            <dt id="SP800-38D">NIST SP 800-38D</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf">
              NIST Special Publication 800-38D: Recommendation for Block Cipher Modes of Operation: 
              Galois/Counter Mode (GCM) and GMAC</a></cite>, November 2007, NIST.
            </dd>
            <dt id="SP800-56A">NIST SP 800-56A</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">
              NIST Special Publication 800-56A: Recommendation for Pair-Wise Key Establishment
              Schemes Using Discrete Logarithm Cryptography (Revised)</a></cite>, March 2007, NIST.
            </dd>
            <dt id="SP800-56C">NIST SP 800-56C</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-56C/SP-800-56C.pdf">
              NIST Special Publication 800-56C: Recommendation for Key Derivation through
              Extraction-then-Expansion</a></cite>, November 2011, NIST.
            </dd>
            <dt id="SP800-108">NIST SP 800-108</dt>
            <dd>
              <cite><a href="http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf">
              NIST Special Publication 800-108: Recommendation for Key Derivation Using
              Pseudorandom Functions (Revised)</a></cite>, October 2009, NIST.
            </dd>
            <dt id="StreamsAPI">StreamsAPI</dt>
            <dd>
              <cite><a href="http://dvcs.w3.org/hg/streams-api/raw-file/tip/Overview.htm">Streams API</a>
              </cite>, F. Moussa. W3C.
            </dd>
          </dl>
        </div>
      </div>
    </div>
    
    <div id="appendices">
      <div id="jwk-mapping" class="section">
        <h2>Mapping between JSON Web Key / JSON Web Algorithm</h2>
        <p class="norm">
          The following section is non-normative. Refer to algorithm-specific sections for the
          normative requirements of importing and exporting JWK.
        </p>
        <div id="jwk-mapping-alg" class="section">
          <h3>Algorithm mappings</h3>
          <table>
            <thead>
              <tr>
                <th scope="col">JSON Web Key</th>
                <th scope="col">AlgorithmIdentifier</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "RSA1_5" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSAES-PKCS1-V1_5" }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "RS256" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSASSA-PKCS1-v1_5",
  hash: { name: "SHA-256" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "RS384" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSASSA-PKCS1-v1_5",
  hash: { name: "SHA-384" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "RS512" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSASSA-PKCS1-v1_5",
  hash: { name: "SHA-512" }
}
</x:codeblock>
                </td>
              </tr>

              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "PS256" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSA-PSS",
  hash: { name: "SHA-256" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "PS384" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSA-PSS",
  hash: { name: "SHA-384" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "RSA",
  alg: "PS512" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "RSA-PSS",
  hash: { name: "SHA-512" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "EC",
  alg: "ES256" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "ECDSA",
  namedCurve: "P-256"
  hash: { name: "SHA-256" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "EC",
  alg: "ES384" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "ECDSA",
  namedCurve: "P-384"
  hash: { name: "SHA-384" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "EC",
  alg: "ES512" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "ECDSA",
  namedCurve: "P-521"
  hash: { name: "SHA-512" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128CTR" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CTR",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192CTR" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CTR",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256CTR" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CTR",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128CBC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CBC",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192CBC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CBC",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256CBC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CBC",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128KW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-KW",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192KW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-KW",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256KW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-KW",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128GCM" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192GCM" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256GCM" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128GCMKW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192GCMKW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256GCMKW" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-GCM",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128CMAC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CMAC",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192CMAC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CMAC",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256CMAC" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CMAC",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A128CFB8" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CFB-8",
  length: 128 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A192CFB8" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CFB-8",
  length: 192 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "A256CFB8" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "AES-CFB-8",
  length: 256 }
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "HS1" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "HMAC",
  hash: { name: "SHA-1" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "HS224" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "HMAC",
  hash: { name: "SHA-224" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "HS256" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "HMAC",
  hash: { name: "SHA-256" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "HS384" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "HMAC",
  hash: { name: "SHA-384" }
}
</x:codeblock>
                </td>
              </tr>
              <tr>
                <td>
<x:codeblock language="es">
{ kty: "oct",
  alg: "HS512" }
</x:codeblock>
                </td>
                <td>
<x:codeblock language="es">
{ name: "HMAC",
  hash: "SHA-512" }
</x:codeblock>
                </td>
              </tr>
            </tbody>
          </table>
          <div class="ednote">
            <p>Should the following be specified.</p>
            <ul>
              <li><p>RSASSA-PKCS1-v1_5 with SHA-1</p></li>
              <li><p>RSA-PSS with SHA-1</p></li>
              <li><p>RSA-OAEP needs specifiers for the hash algorithms.</p></li>
              <li><p>ECDSA with SHA-1</p></li>
              <li>
                <p>
                  ECDSA where the curve (P-256, P-384, P-521) is not aligned with the hash (SHA-256,
                  SHA-384, SHA-512)
                </p>
              </li>
            </ul>
          </div>
        </div>
        <div id="jwk-mapping-usage" class="section">
          <h3>Usage mapping</h3>
          <table>
            <thead>
              <tr>
                <th scope="col">JWK <code>use</code> value</th>
                <th scope="col"><a href="#dfn-KeyUsage">KeyUsage</a>s</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>enc</code></td>
                <td><code>["encrypt", "decrypt", "wrapKey", "unwrapKey"]</code></td>
              </tr>
              <tr>
                <td><code>sig</code></td>
                <td><code>["sign","verify"]</code></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div id="spki-mapping" class="section">
        <h2>Mapping between Algorithm and SubjectPublicKeyInfo</h2>
        <p class="norm">
          The following section is non-normative. Refer to algorithm-specific sections for the
          normative requirements of importing and exporting SPKI.
        </p>
        <table>
          <thead>
            <tr>
              <th scope="col">Algorithm OID</th>
              <th scope="col">subjectPublicKey ASN.1 structure</th>
              <th scope="col">AlgorithmIdentifier</th>
              <th scope="col">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>rsaEncryption (1.2.840.113549.1.1.1)</td>
              <td>RSAPublicKey</td>
              <td>
                <code>"RSAES-PKCS1-v1_5"</code>,
                <code>"RSASSA-PKCS1-v1_5"</code>,
                <code>"RSA-PSS"</code>, or
                <code>"RSA-OAEP"</code>
              </td>
              <td>
                <a href="#RFC3279">RFC 3279</a>,
                <a href="#RFC4055">RFC 4055</a>,
                <a href="#RFC5756">RFC 5756</a>
              </td>
            </tr>
            <tr>
              <td>id-RSASSA-PSS (1.2.840.113549.1.1.10)</td>
              <td>RSAPublicKey</td>
              <td><code>"RSA-PSS"</code></td>
              <td>
                <a href="#RFC4055">RFC 4055</a>,
                <a href="#RFC5756">RFC 5756</a>
              </td>
            </tr>
            <tr>
              <td>id-RSAES-OAEP (1.2.840.113549.1.1.7)</td>
              <td>RSAPublicKey</td>
              <td><code>"RSA-OAEP"</code></td>
              <td>
                <a href="#RFC4055">RFC 4055</a>,
                <a href="#RFC5756">RFC 5756</a>
              </td>
            </tr>
            <tr>
              <td>id-ecPublicKey (1.2.840.10045.2.1)</td>
              <td>ECPoint</td>
              <td><code>"ECDH"</code> or <code>"ECDSA"</code></td>
              <td><a href="#RFC5480">RFC 5480</a></td>
            </tr>
            <tr>
              <td>id-ecDH (1.3.132.112)</td>
              <td>ECPoint</td>
              <td><code>"ECDH"</code></td>
              <td><a href="#RFC5480">RFC 5480</a></td>
            </tr>
            <tr>
              <td>id-dsa (1.2.840.10040.4.1)</td>
              <td>DSAPublicKey</td>
              <td><code>"DSA"</code></td>
              <td><a href="#RFC3279">RFC 3279</a></td>
            </tr>
            <tr>
              <td>dhpublicnumber (1.2.840.10046.2.1)</td>
              <td>DHPublicKey</td>
              <td><code>"DH"</code></td>
              <td><a href="#RFC3279">RFC 3279</a></td>
            </tr>
          </tbody>
        </table>
        <div class="ednote">
          <p>
            The handling of "id-RSASSA-PSS" and "id-RSAES-OAEP" are tricky.
            <a href="#RFC5756">RFC 5756</a> recommends implementations should not include parameters
            when PSS is used with a subjectPublicKeyInfo, and MUST NOT include parameters when OAEP
            is used. However, when OAEP is used as part of a key transport (as an AlgorithmIdentifier),
            implementations MUST include the parameters.
          </p>
          <p>
            The natural conflict is in deciding when a key is being exported as part of a
            subjectPublicKeyInfo (which is what "spki" implies) and when it's being used as an
            algorithmIdentifier for transport.
          </p>
        </div>
      </div>
      <div id="pkcs8-mapping" class="section">
        <h2>Mapping between Algorithm and PKCS#8 PrivateKeyInfo</h2>
        <p class="norm">
          The following section is non-normative. Refer to algorithm-specific sections for the
          normative requirements of importing and exporting PKCS#8 PrivateKeyInfo.
        </p>
        <table>
          <thead>
            <tr>
              <th scope="col">privateKeyAlgorithm</th>
              <th scope="col">privateKey format</th>
              <th scope="col">AlgorithmIdentifier</th>
              <th scope="col">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>rsaEncryption (1.2.840.113549.1.1.1)</td>
              <td>RSAPrivateKey</td>
              <td>
                <code>"RSAES-PKCS1-v1_5"</code>,
                <code>"RSASSA-PKCS1-v1_5"</code>,
                <code>"RSA-PSS"</code>, or
                <code>"RSA-OAEP"</code>
              </td>
              <td>
                <a href="#RFC3447">RFC 3447</a>,
                <a href="#RFC5958">RFC 5958</a>
              </td>
            </tr>
            <tr>
              <td>id-RSASSA-PSS (1.2.840.113549.1.1.10)</td>
              <td>RSAPrivateKey</td>
              <td><code>"RSA-PSS"</code></td>
              <td>
                <a href="#RFC3447">RFC 3447</a>,
                <a href="#RFC4055">RFC 4055</a>,
                <a href="#RFC5958">RFC 5958</a>
              </td>
            </tr>
            <tr>
              <td>id-RSAES-OAEP (1.2.840.113549.1.1.7)</td>
              <td>RSAPrivateKey</td>
              <td><code>"RSA-OAEP"</code></td>
              <td>
                <a href="#RFC3447">RFC 3447</a>,
                <a href="#RFC4055">RFC 4055</a>,
                <a href="#RFC5958">RFC 5958</a>
              </td>
            </tr>
            <tr>
              <td>id-ecPublicKey (1.2.840.10045.2.1)</td>
              <td>ECPrivateKey</td>
              <td><code>"ECDH"</code> or <code>"ECDSA"</code></td>
              <td>
                <a href="#RFC5480">RFC 5480</a>,
                <a href="#RFC5915">RFC 5915</a>,
                <a href="#RFC5958">RFC 5958</a>
              </td>
            </tr>
            <tr>
              <td>id-ecDH (1.3.132.112)</td>
              <td>ECPrivateKey</td>
              <td><code>"ECDH"</code></td>
              <td>
                <a href="#RFC5480">RFC 5480</a>,
                <a href="#RFC5915">RFC 5915</a>,
                <a href="#RFC5958">RFC 5958</a>
              </td>
            </tr>
            <tr>
              <td>id-dsa (1.2.840.10040.4.1)</td>
              <td>INTEGER</td>
              <td><code>"DSA"</code></td>
              <td><a href="#RFC5958">RFC 5958</a></td>
            </tr>
            <tr>
              <td>dhpublicnumber (1.2.840.10046.2.1)</td>
              <td>INTEGER</td>
              <td><code>"DH"</code></td>
              <td><a href="#RFC5958">RFC 5958</a></td>
            </tr>
          </tbody>
        </table>
        <div class="ednote">
          <p>
            There does not appear to be a normative reference for a DH key being encoded as an
            INTEGER. Only RFC 5958 seems to mention this.
          </p>
        </div>
      </div>
    </div>
  </body>
</html>  
